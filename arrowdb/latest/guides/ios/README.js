Ext.data.JsonP['ios']({"guide":"<h1 id='ios-section-appcelerator-platform-services-sdk-for-ios-arrowdb-and-arrow-push'>Appcelerator Platform Services SDK for iOS -- ArrowDB and Arrow Push</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href='#!/guide/ios-section-getting-the-sdk'>Getting the SDK</a><li><a href='#!/guide/ios-section-running-the-apscloudexample-application'>Running the APSCloudExample Application</a><li><a href='#!/guide/ios-section-enabling-cloud-services-in-a-new-project'>Enabling Cloud services in a new Project</a><li><a href='#!/guide/ios-section-making-api-calls-and-handling-responses'>Making API Calls and Handling Responses</a><ul><li><a href='#!/guide/ios-section-building-request-parameters'>Building Request Parameters</a><li><a href='#!/guide/ios-section-handling-responses'>Handling Responses</a><ul><li><a href='#!/guide/ios-section-example-apsusers-login-call-with-response-handler'>Example: APSUsers Login Call with Response Handler</a></ul><li><a href='#!/guide/ios-section-monitoring-request-progress'>Monitoring Request Progress</a><ul><li><a href='#!/guide/ios-section-example-apsphotos-create-call-with-progress-handler'>Example: APSPhotos Create Call with Progress Handler</a></ul></ul><li><a href='#!/guide/ios-section-making-generic-rest-apis-method-calls'>Making Generic REST APIs Method Calls</a><li><a href='#!/guide/ios-section-working-with-push-notifications'>Working with Push Notifications</a></ul>\n</div>\n\n<p>The Appcelerator Platform Services (APS) SDK for iOS provides APIs for your iOS\napplication built with Objective-C to access ArrowDB and Arrow Push.</p>\n\n<h2 id='ios-section-getting-the-sdk'>Getting the SDK</h2>\n\n<p>To download and start using the SDK, you first need to register a new iOS application in\n<a href=\"https://platform.appcelerator.com\">Dashboard</a>. See\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Non-Titanium_Client_Applications_in_Dashboard\">Managing Non-Titanium Client Applications in Dashboard</a>\nfor details on registering a new application. After you register an application, a service\nkey is generated that associates your application with all the Platform services. Dashboard also provides\nfull instructions for enabling all Platform Services in your application. This guide will deal specifically\nwith enabling and using ArrowDB and Arrow Push in an iOS application.</p>\n\n<p><p><img src=\"guides/ios/instrux.png\" alt=\"\" width=\"781\" height=\"248\"></p></p>\n\n<h2 id='ios-section-running-the-apscloudexample-application'>Running the APSCloudExample Application</h2>\n\n<p>The SDK ZIP file includes an iOS sample project that demonstrates basic usage of each of the Cloud APIs.\nTo run the sample, register a new application in Dashboard to obtain the necessary\nservice application. You will then copy the key into the imported sample project's application delegate,\nthen run the application.</p>\n\n<p><strong>To create the APSCloudExample application in Dashboard:</strong></p>\n\n<ol>\n<li>Login to <a href=\"https://platform.appcelerator.com\">Appcelerator Dashboard</a>.</li>\n<li>From the <strong>Orgs</strong> menu, select the organization to associate with the application.\nNote that the Orgs menu will not appear if you are not a member of multiple organizations.</li>\n<li>Click the Add menu (+) and select <strong>Register App for Services</strong>.</li>\n<li>In the dialog:\n\n<ul>\n<li>Enter <strong>APSCloudExampleApp</strong> (or other name) in the <strong>Name</strong> field.</li>\n<li>Select <strong>iOS</strong> from the <strong>Platform</strong> menu.</li>\n<li>Select any category from the <strong>Category</strong> menu.\n<p><img src=\"guides/ios/create_app.png\" alt=\"\" width=\"368\" height=\"285\"></p></li>\n</ul>\n</li>\n<li>Click <strong>Next</strong> and then click the <strong>Overview</strong> tab.</li>\n<li>Click the <strong>Services</strong> tab, then click <strong>Show Key</strong> under <strong>Cloud /  Performance /  Analytics</strong>.</li>\n<li>Select <strong>Development</strong> from the Environment menu, then click the clipboard icon to copy the key to your clipboard.\n<p><img src=\"guides/ios/copy_key.png\" alt=\"\" width=\"447\" height=\"178\"></p></li>\n</ol>\n\n\n<p>Next, import the APSCloudExample project into Xcode, copy the key from your clipboard into the\napplication delegate, and run the application.</p>\n\n<p><strong>To import the completed APSCloudExample project:</strong></p>\n\n<ol>\n<li>In Xcode, open the <strong><code>appcelerator-sdk-ios-&lt;VERSION&gt;/examples/APSCloudExample.xcodeproj</code></strong>.</li>\n<li><p>Open <strong><code>AppDelegate.m</code></strong>, add the code below to your application delegate's <code>application:didFinishLaunchingWithOptions</code> method,\nand replace <strong>&lt;&lt; YOUR APP KEY >></strong> with the application key you copied to your clipboard previously.</p>\n\n<pre><code> [[APSServiceManager sharedInstance] enableWithAppKey:@\"&lt;&lt; YOUR APP KEY &gt;&gt;\"];\n</code></pre></li>\n<li><p>Run the application on an iOS device or simulator.</p></li>\n</ol>\n\n\n<p>Once the application is running, try the following:</p>\n\n<ul>\n<li><p>Create a new user by selecting <strong>Users > Create User</strong>. Enter a username, password and password confirmation\nand then click <strong>Create</strong>. If the user is created successfully, the following dialog is shown:\n<p><img src=\"guides/ios/new_user_success.png\" alt=\"\" width=\"300\" height=\"184\"></p></p></li>\n<li><p>View the newly created user in Dashboard:</p>\n\n<ol>\n<li>Open <a href=\"https://platform.appcelerator.com\">Dashboard</a> and select your application from the Apps menu.</li>\n<li>Select <strong>Cloud > Manage Data</strong>, then click <strong>Users</strong> in the Manage Data Object table. You\nshould see the user you created listed in the Users table.\n<p><img src=\"guides/ios/verify_new_user.png\" alt=\"\" width=\"570\" height=\"219\"></p></li>\n</ol>\n</li>\n</ul>\n\n\n<h2 id='ios-section-enabling-cloud-services-in-a-new-project'>Enabling Cloud services in a new Project</h2>\n\n<p>Once you've\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Non-Titanium_Client_Applications_in_Dashboard\">registered an application in Dashboard</a>,\ndownloaded the SDK, and obtained your application service key,\nthere are few steps to enable Cloud services in your iOS project.\nThe steps are slightly different if you are using Xcode 6 or 5.</p>\n\n<p><strong>To enable the Cloud service in an existing Xcode project</strong>:</p>\n\n<ol>\n<li>Add the <strong><code>appcelerator-sdk-ios-&lt;VERSION&gt;/Appcelerator.framework</code></strong> folder to your project:\n\n<ul>\n<li>For Xcode 5 projects, drag the <strong>Appcelerator.framework</strong> folder to your project's Frameworks folder,\nmaking sure <strong>Copy items into destination group's folder</strong> is checked, and click <strong>Finish</strong>.</li>\n<li>For Xcode 6 projects, drag the <strong>Appcelerator.framework</strong> folder to the project's root folder,\nmaking sure <strong>Copy Items if Needed</strong> is checked, and click <strong>Finish</strong>.</li>\n</ul>\n</li>\n<li>On your project's <strong>Build Phases</strong> tab, expand the <strong>Link Binary With Libraries</strong> section and add\nthe <strong>libsqlite3.dylib</strong> and <strong>libz.dylib</strong> frameworks.</li>\n<li>On your project's <strong>Build Settings</strong> tab, click <strong>All</strong> in the top-left corner, then expand the <strong>Linking</strong> section.</li>\n<li>In the <strong>Other Linker Flags</strong> field, enter <strong>-ObjC</strong>. <p><img src=\"guides/ios/otherlinker.png\" alt=\"\" width=\"386\" height=\"144\"></p></li>\n<li><p>Import <code>Appcelerator.h</code> into your application delegate:</p>\n\n<pre><code> #import &lt;Appcelerator/Appcelerator.h&gt;\n</code></pre></li>\n<li><p>Lastly, initialize Platform services by calling the <code>[APSServiceManager enableWithAppKey]</code> method,\nreplacing <strong>&lt;&lt; YOUR APP KEY >></strong> with the service key\ngenerated by Dashboard when you created your application. (See\n<a href=\"http://docs.appcelerator.com/platform/redirects/aps_key.html\">View Application Information</a> for how to\nlocate your application key.)</p>\n\n<pre><code>  [[APSServiceManager sharedInstance] enableWithAppKey:@\"&lt;&lt;YOUR APP KEY&gt;&gt;\"];\n</code></pre></li>\n</ol>\n\n\n<p>At this point, your application can begin making API calls.</p>\n\n<h2 id='ios-section-making-api-calls-and-handling-responses'>Making API Calls and Handling Responses</h2>\n\n<p>The iOS framework includes a collection of classes whose methods map to\nindividual REST API method endpoints. For example, the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSUsers.html#//api/name/create:withBlock:\">[APSUsers create]</a>\nmethod corresponds to the <a href=\"#!/api/Users-method-create\"><code>/users/create.json</code></a> method\nendpoint.</p>\n\n<p>Alternatively, you can use the generic\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSCloud.html#//api/name/sendRequest:method:data:handler:\">[APSCloud sendRequest]</a>\nmethod to make REST calls directly\nagainst the Cloud APIs. For more information, see\n<a href=\"#!/guide/ios-section-making-generic-rest-apis-method-calls\">Making Generic REST API Calls</a>.</p>\n\n<h3 id='ios-section-building-request-parameters'>Building Request Parameters</h3>\n\n<p>The first parameter of each Cloud API method is a <code>NSDictionary</code> object that contains the of\nparameters to send with the request. For example, the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSPhotos.html#//api/name/show:withBlock:\">[APSPhotos show]</a>\nmethod takes a <code>photo_id</code> parameter whose value is, naturally, the ID of the photo to show.</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{@\"photo_id\": self.photoId};\n[APSPhotos show:data withBlock:^(APSResponse *e) {\n    // Handle response\n}];\n</code></pre>\n\n<h3 id='ios-section-handling-responses'>Handling Responses</h3>\n\n<p>The second parameter of each method call is a block that is passed an\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSResponse.html\">APSResponse</a>\nwhose properties contain information about the response. For instance,\nthe <code>success</code> property contains a boolean indicating if the method call was successful or not;\nthe <code>response</code> property returns a JSON-encoded object with the results of the method call.</p>\n\n<pre><code>NSDictionary *data = @{@\"photo_id\": self.photoId};\n[APSPhotos show:data withBlock:^(APSResponse *e) {\n    // The block will be called on the thread the request was started on\n    if (e.success) {\n        // Remove the backslashes from URLs in the JSON\n        self.textView.text = [e.responseString stringByReplacingOccurrencesOfString:@\"\\\\\" withString:@\"\"];\n    } else {\n        [Utils handleErrorInResponse:e];\n    }\n}];\n</code></pre>\n\n<p>Note that the block will be called on the thread that the request was started on.</p>\n\n<h4 id='ios-section-example-apsusers-login-call-with-response-handler'>Example: APSUsers Login Call with Response Handler</h4>\n\n<p>The following example logs in an existing ArrowDB user by their username and password. After a successful\nlogin, the application displays an alert indicating a successful login.</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n   @\"login\": self.usernameField.text,\n   @\"password\": self.passwordField.text\n};\n\n[APSUsers login:data withBlock:^(APSResponse *e) {\n    // The block will be called on the thread the request was started on\n    if (e.success) {\n        NSString *userId = [[[e.response objectForKey:@\"users\"] objectAtIndex:0] objectForKey:@\"id\"];\n        NSString *msg = [NSString stringWithFormat:@\"Logged in! You are now logged in as %@\", userId];\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [Utils handleErrorInResponse:e];\n    }\n}];\n</code></pre>\n\n<h3 id='ios-section-monitoring-request-progress'>Monitoring Request Progress</h3>\n\n<p>For Cloud API methods that involve uploading large files, such as\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSPhotos.html#//api/name/create:withBlock:progressBlock:\">[APSPhotos create]</a>\nor [APSFiles create],\nthere is an overloaded version that takes an additional <code>progressBlock</code> parameter. This parameter\nis a code block that is periodically invoked and passed a float value indicating the progress of the request,\nand a boolean indicating if the request is for an upload (YES) or download (NO).</p>\n\n<h4 id='ios-section-example-apsphotos-create-call-with-progress-handler'>Example: APSPhotos Create Call with Progress Handler</h4>\n\n<p>The following example creates a new Photo object from a binary photo attachment. The <code>progressBlock</code>\ncode block sets the <code>progress</code> property on a <code>ProgressBar</code> object, displaying the status of the upload.</p>\n\n<pre><code>NSDictionary *data = @{\n    @\"photo\": self.photoData,\n    @\"photo_sync_sizes[]\": @\"small_240\"\n};\n[APSPhotos create:data withBlock:^(APSResponse *e) {\n    // The block will be called on the thread the request was started on\n    if (e.success) {\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"Uploaded!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n        self.photoData = nil;\n    } else {\n        [Utils handleErrorInResponse:e];\n    }\n    self.createButton.hidden = NO;\n} progressBlock:^(float progress, BOOL upload) {\n    // The block will be called on the thread the request was started on\n    self.progressBar.progress = progress;\n}];\n</code></pre>\n\n<h2 id='ios-section-making-generic-rest-apis-method-calls'>Making Generic REST APIs Method Calls</h2>\n\n<p>The <a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSCloud.html#//api/name/sendRequest:method:data:handler:\">[APSCloud sendRequest]</a>\nmethod lets you easily make REST API calls directly against ArrowDB, rather than using the specialized classes. In general, you\nshould use the specialized classes as they provide an easier API. However, if new REST methods\nare deployed to the APS Cloud backend, this approach lets you immediately start using those methods\nwithout waiting for an update to the SDK.</p>\n\n<p>To make a generic request, you call\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSCloud.html#//api/name/sharedInstance\">[APSCloud sharedInstance]</a>\nto get a reference to the shared APSCloud object, and then call its\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSCloud.html#//api/name/sendRequest:method:data:handler:\">sendRequest</a>\nmethod. For each call, you must specify the following:</p>\n\n<ul>\n<li>REST API method endpoint relative to \"api.cloud.appcelerator.com/v1\". Method endpoints are listed in the corresponding entries in the\n<a href=\"#!/api\">REST API documentation</a>.</li>\n<li>The HTTP method to use.</li>\n<li>Data to send with the request.</li>\n</ul>\n\n\n<p>For example, to <a href=\"#!/api/Posts-method-create\">create a post</a>,\npass the <code>sendRequest()</code> method the following information:</p>\n\n<ul>\n<li>REST API method endpoint: <code>posts/create.json</code></li>\n<li>The HTTP method to use: <code>POST</code></li>\n<li>Data to send with the request: at minimum, you must specify the <code>content</code> property.</li>\n</ul>\n\n\n<p>The following example calls <a href=\"#!/api/Users-method-login\">users/login.json</a>\nREST method directly and logs the result to the console.</p>\n\n<pre><code>NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:\n                                    @\"jalter\", @\"login\",\n                                    @\"pass\", @\"password\",\n                                    nil];\n[[APSCloud sharedInstance] sendRequest:@\"users/login.json\" method:@\"POST\" data:datahandler:^(APSResponse *e) {\n    NSLog(@\"SUCCESS: %hhd\", e.success);\n    NSLog(@\"ERROR: %hhd\", e.error);\n    NSLog(@\"MESSAGE: %@\", e.message);\n}];\n</code></pre>\n\n<h2 id='ios-section-working-with-push-notifications'>Working with Push Notifications</h2>\n\n<p>The  <a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSPushNotifications.html\"><code>APSPushNotifications</code></a>\nclass lets your application subscribe, send and receive push notifications. To use the class:</p>\n\n<ul>\n<li><a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Configuring_push_services-section-37551713_Configuringpushservices-ConfiguringpushservicesforiOSdevices\">Configure push notification services</a> for your application.</li>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW2\">Register your application</a> to obtain the necessary device token.</li>\n</ul>\n\n\n<p>Once push services have been configured, the application needs to register with iOS to receive push\nnotifications.  For example, you can add the following code to the application delegate\nimplementation file in the <code>application:didFinishLaunchingWithOptions:</code> method:</p>\n\n<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [[APSServiceManager sharedInstance] enableWithAppKey:@\"APS_APP_KEY\"];\n\n    // Add this code to register for remote notifications\n    UIUserNotificationType types = UIUserNotificationTypeBadge |\n    UIUserNotificationTypeSound | UIUserNotificationTypeAlert;\n\n    UIUserNotificationSettings *mySettings =\n    [UIUserNotificationSettings settingsForTypes:types categories:nil];\n\n    [[UIApplication sharedApplication] registerUserNotificationSettings:mySettings];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n\n    return YES;\n}\n</code></pre>\n\n<p>After the application registers with iOS to receive push notifications, the application needs to\nregister the device with Appcelerator Cloud.  Call the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSPushNotifications.html#//api/name/subscribe:withBlock:\">subscribe</a>\nor\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/ios/Classes/APSPushNotifications.html#//api/name/subscribeToken:withBlock:\">subscribeToken</a>\nmethod inside the application delegate's <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code> method.\nNote that you will need to convert the NSData parameter to a hex string before passing it to either\nthe <code>subscribe</code> or <code>subscribeToken</code> method.</p>\n\n<pre><code>- (void)application:(UIApplication *)app\n  didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)devToken {\n\n    // Convert the token to a string\n    const unsigned *tokenBytes = [devToken bytes];\n    NSString *hexToken = [NSString stringWithFormat:@\"%08x%08x%08x%08x%08x%08x%08x%08x\",\n                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n\n    NSDictionary *subscribeData = @{\n                                    @\"device_token\": hexToken,\n                                    @\"channel\": @\"friend_channel\",\n                                    @\"type\": @\"ios\"\n                                    };\n    [APSPushNotifications subscribeToken:subscribeData withBlock:^(APSResponse *e) {\n        if (e.success) {\n            NSLog(@\"Successfully subscribed to push: %@\", e.responseString);\n        } else {\n            NSLog(@\"Error in registration. Error: %@\", e.errorMessage);\n        }\n    }];\n}\n</code></pre>\n\n<p>Once push services have been configured, and you've obtained a device token by registering your application\nto receive remote notifications, you can start calling methods of the <code>APSPushNotifications</code> class.</p>\n","title":"iOS SDK"});