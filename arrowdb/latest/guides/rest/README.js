Ext.data.JsonP['rest']({"guide":"<h1 id='rest-section-using-the-rest-api'>Using the REST API</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href='#!/guide/rest-section-rest-api-basics'>REST API Basics</a><li><a href='#!/guide/rest-section-authentication'>Authentication</a><li><a href='#!/guide/rest-section-user-sessions-and-cookies'>User Sessions and Cookies</a><li><a href='#!/guide/rest-section-testing-with-curl-and-wget'>Testing with cURL and wget</a><li><a href='#!/guide/rest-section-uploading-photos'>Uploading Photos</a><li><a href='#!/guide/rest-section-object-ids'>Object IDs</a><li><a href='#!/guide/rest-section-response-paging'>Response Paging</a></ul>\n</div>\n\n<p>ArrowDB provides a REST API accessible from any networked client\ndevice for creating, querying, updating, and deleting ArrowDB objects.</p>\n\n<p>Each ArrowDB object supports a set of methods, which are documented in the <a href=\"#!/api\">API reference</a>.</p>\n\n<h2 id='rest-section-rest-api-basics'>REST API Basics</h2>\n\n<p>Each of the REST API methods has its own URL and HTTP method (GET, POST, PUT, or DELETE).</p>\n\n<p>To make an API call, you make an HTTP request. Method parameters are passed in the URL query string or in the\nmessage body, depending on the HTTP method.</p>\n\n<p>For GET and DELETE requests, send the parameters in the URL itself as part of the URL query\nstring. For example:</p>\n\n<pre><code>https://api.cloud.appcelerator.com/v1/checkins/show.json?key=&lt;YOUR APP APP KEY&gt;&amp;checkin_id=4d8bc645d0afbe0363000013\n</code></pre>\n\n<p>For POST and PUT requests, you send an HTTP request with the <code>multipart/form-data</code> media\ntype, where each parameter is sent as a separate form field.</p>\n\n<p>API responses are returned as JSON objects. In most cases, the response JSON includes two objects:</p>\n\n<ul>\n<li><p><code>meta</code>. Object containing response metadata, including the response status code and error message,\nif any.</p></li>\n<li><p><code>response</code>. Object containing the actual data for the request. The <code>response</code> object is\nomitted for some requests, such as delete requests, that return no data.</p></li>\n</ul>\n\n\n<h2 id='rest-section-authentication'>Authentication</h2>\n\n<p>All API calls must contain a valid App Key  or 2-Legged OAuth signature and request header for the ArrowDB\nserver to process and respond to them. See the <a href=\"#!/guide/authentication\">authentication page</a>\nfor more information.</p>\n\n<h2 id='rest-section-user-sessions-and-cookies'>User Sessions and Cookies</h2>\n\n<p>To create a user and perform actions which require a logged-in user,\nthe <code>session_id</code> cookie must be saved and reused with each API call.</p>\n\n<p>To get a session ID, use the <code>users/login.json</code> method to login in to the application.  If the API\ncall is successful, the <code>session_id</code> field is returned in the <code>meta</code> object of the response.\nFor example:</p>\n\n<pre><code>curl -F \"login=admin\" -F \"password=admin\" \"https://api.cloud.appcelerator.com/v1/users/login.json?key=&lt;API_KEY&gt;\"\n{\n  \"meta\": {\n    \"code\": 200,\n    \"status\": \"ok\",\n    \"method_name\": \"loginUser\",\n    \"session_id\": \"sjuvQqSEYTD3DekMCrUHcCTf7GU\"\n  },\n  \"response\": {\n    \"users\": [\n      {\n        \"id\": \"526edc0d294e712499000004\",\n        \"created_at\": \"2013-10-28T21:50:05+0000\",\n        \"updated_at\": \"2013-12-05T01:02:32+0000\",\n        \"external_accounts\": [\n        ],\n        \"confirmed_at\": \"2013-10-28T21:50:05+0000\",\n        \"username\": \"admin\",\n        \"role\": \"\",\n        \"admin\": \"true\",\n      }\n    ]\n  }\n}\n</code></pre>\n\n<p>Pass the <code>session_id</code> value to the <code>_session_id</code> parameter in the URL, for example:</p>\n\n<pre><code>https://api.cloud.appcelerator.com/v1/reviews/create.json?key=&lt;API_KEY&gt;&amp;_session_id=&lt;SESSION_ID&gt;\n</code></pre>\n\n<p>With the cURL command, use the <code>-b</code> and <code>-c</code> options to read and write cookies to store your session\nID. Many of the REST examples in the documentation use these options.</p>\n\n<p>User login sessions expire after they have been unused for three months.\nIf the application saves and uses a persistent reference to the user login session, and the\nuser session expires, any ArrowDB call that requires a user login will return a 404 error.\nYour application needs to handle an invalid user session error, such as prompting the user\nto log in.</p>\n\n<h2 id='rest-section-testing-with-curl-and-wget'>Testing with cURL and wget</h2>\n\n<p><a href=\"http://curl.haxx.se\">cURL</a> and <a href=\"https://www.gnu.org/software/wget\">wget</a> are\nboth excellent tools for quickly testing ArrowDB API calls from\nthe command line. Using these commands can help you determine what calls to make\nand show you the JSON output that your app receives. cURL is included with\nOS X, and can easily be used from the Terminal application:</p>\n\n<pre><code>$ curl --verbose -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/places/search.json?key=vvCNPSh1cd0Gb5A6tWZAIC4MngO95mGs\n</code></pre>\n\n<p>Use the <code>-b cookies.txt</code> and <code>-c cookies.txt</code> options to save and reuse the\n<code>_session_id</code> cookie sent from the ArrowDB server. The <code>--verbose</code>\noption is useful for seeing all of the HTTP header and cookie information sent\nand received by the ArrowDB server.</p>\n\n<pre><code>$ curl --verbose -b cookies.txt -c cookies.txt -F \"login=mike@appcelerator.com\" -F \"password=food\" https://api.cloud.appcelerator.com/v1/users/login.json?key=vjCQ6KRqplmkektlpbEjiDQ2nYReubkP\n* About to connect() to host (#0)\n*   Trying 1.2.3.4... connected\n* Connected to host (1.2.3.4) (#0)\n&gt; POST /v1/users/login.json?key=vjCQ6KRqplmkektlpbEjiDQ2nYReubkP HTTP/1.1\n&gt; User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3\n&gt; Host: &lt;%= \"#{@api_url}\"%&gt;\n&gt; Accept: */*\n&gt; Content-Length: 259\n&gt; Expect: 100-continue\n&gt; Content-Type: multipart/form-data; boundary=----------------------------e6e42e31228c\n&gt; \n* Done waiting for 100-continue\n&lt; HTTP/1.1 200 OK \n&lt; X-Ua-Compatible: IE=Edge\n&lt; Access-Control-Allow-Headers: x-requested-with\n&lt; Etag: \"9eeb8ecc4fd905ab6b340c290f24ea0f\"\n&lt; Access-Control-Allow-Methods: POST, GET, PUT, DELETE, OPTIONS\n&lt; Connection: Keep-Alive\n&lt; Content-Type: application/json; charset=utf-8\n&lt; Date: Mon, 16 May 2011 04:56:58 GMT\n&lt; Server: WEBrick/1.3.1 (Ruby/1.8.7/2009-06-12)\n&lt; X-Runtime: 1.681994\n&lt; Content-Length: 480\n&lt; Cache-Control: max-age=0, private, must-revalidate\n&lt; Access-Control-Allow-Credentials: true\n* Added cookie _session_id=\"4dd0ae9ad0afbe183300001c\" for domain localhost, path /, expire 0\n&lt; Set-Cookie: _session_id=4dd0ae9ad0afbe183300001c; path=/; HttpOnly\n&lt; \n{\n  \"meta\": {\n    \"stat\":\"ok\",\n    \"code\":200,\n    \"method\":\"loginUser\",\n    \"session_id\":\"4dd0ae9ad0afbe183300001c\"\n  },\n  \"response\": {\n    \"users\": [\n      {\n        \"id\":\"4dc6334fd0afbe3700000001\",\n        \"first_name\":\"Mike\",\n        \"last_name\":\"Goff\",\n        \"created_at\":\"2011-05-08T06:08:15+0000\",\n        \"updated_at\":\"2011-05-16T04:56:58+0000\",\n        \"facebook_authorized\":false,\n        \"email\":\"mike@appcelerator.com\"\n      }\n    ]\n  } \n}\n</code></pre>\n\n<h2 id='rest-section-uploading-photos'>Uploading Photos</h2>\n\n<p>The <code>create</code> (POST) and <code>update</code> (PUT) methods for many objects such as\n<code>Users</code>, <code>Checkins</code>, and <code>Photos</code> take an optional <code>photo</code> or <code>file</code> parameter\nto send a photo. The binary data must be sent in a form with Content-Type\n<code>multipart/form-data</code>, and the content type of the <code>photo</code> or <code>file</code> must be\n<code>image/jpeg</code>, <code>image/png</code>, or <code>image/gif</code>.</p>\n\n<p>When using cURL, uploading a photo can be done easily by using <code>@</code> in front of\nthe filename, such as <code>@photo.jpg</code>, to specify that the file should be\nattached.</p>\n\n<pre><code>$ curl --verbose -b cookies.txt -c cookies.txt -F \"photo=@photo.jpg\" -F \"message=At the beach\" https://api.cloud.appcelerator.com/v1/statuses/create.json?key=&lt;API_KEY&gt;\n</code></pre>\n\n<h2 id='rest-section-object-ids'>Object IDs</h2>\n\n<p>All returned data objects contain unique IDs which are 24-digit hexadecimal\nstrings. These IDs may be use to efficiently return data for a single object:</p>\n\n<pre><code>GET https://api.cloud.appcelerator.com/v1/places/show/**4d6f13e96f70953608000012**.json?key=&lt;API_KEY&gt;\n\n{\n  \"meta\": {\n    \"stat\":\"ok\",\n    \"code\":200,\n    \"method\":\"showPlace\"\n  },\n  \"response\": {\n    \"places\": [\n      {\n          \"id\":\"4d6f13e96f70953608000012\",\n          \"name\":\"Maya Restaurant\",\n          \"created_at\":\"2011-03-03T04:07:05+0000\",\n          \"updated_at\":\"2011-03-03T04:07:05+0000\",\n          \"address\":\"303 2nd Street\",\n          \"city\":\"San Francisco\",\n          \"state\":\"CA\",\n          \"country\":\"United States\",\n          \"phone\":\"(415) 543-2928\",\n          \"lat\":37.784732,\n          \"lng\":-122.395441 \n      }\n    ]\n  } \n}\n</code></pre>\n\n<h2 id='rest-section-response-paging'>Response Paging</h2>\n\n<p class=\"note\">For <a href=\"#!/guide/search_query\">query</a> operations, the\n  <code>page</code> and <code>per_page</code> paging mechanism described below\n  only applies to applications created before ArrowDB 1.1.5. For applications\n  created with ArrowDB 1.1.5 and later, you must use range-based queries, as\n  discussed in <a href=\"#!/guide/search_query-section-query-pagination\">Query\n  Pagination</a>. </p>\n\n\n<p>API calls which return arrays of objects take optional <code>page</code> and <code>per_page</code>\narguments to specify the number of objects to return. By default, ten objects\nare returned on each page, and the request may specify up to 20 results per\npage. Page numbers start at 1; if unspecified, the page defaults to page 1.</p>\n\n<p>Data about the current page is included in the <code>meta</code> object. For paged responses,\nthe <code>meta</code> object includes the <code>page</code>, <code>per_page</code>, <code>total_pages</code> and <code>total_results</code> keys:</p>\n\n<pre><code>\"meta\": {\n  \"status\":\"ok\",\n  \"code\":200,\n  \"method_name\":\"showThreadMessages\",\n  \"page\":1,\n  \"per_page\":10,\n  \"total_pages\":1,\n  \"total_results\":3\n},\n</code></pre>\n","title":"Using the REST API"});