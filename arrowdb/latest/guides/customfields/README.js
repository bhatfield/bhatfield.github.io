Ext.data.JsonP['customfields']({"guide":"<h1 id='customfields-section-custom-objects-amp-fields'>Custom Objects &amp; Fields</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href='#!/guide/customfields-section-custom-objects-and-custom-fields'>Custom Objects and Custom Fields</a><li><a href='#!/guide/customfields-section-creating-custom-objects'>Creating Custom Objects</a><li><a href='#!/guide/customfields-section-adding-custom-fields-to-predefined-objects'>Adding Custom Fields to Predefined Objects</a><li><a href='#!/guide/customfields-section-supported-data-types'>Supported Data Types</a><li><a href='#!/guide/customfields-section-indexing-size-limit-for-custom-objects-and-fields'>Indexing Size Limit for Custom Objects and Fields</a><li><a href='#!/guide/customfields-section-geographic-coordinates-in-custom-fields'>Geographic Coordinates in Custom Fields</a><li><a href='#!/guide/customfields-section-remove-a-field'>Remove a Field</a><li><a href='#!/guide/customfields-section-querying-custom-fields'>Querying Custom Fields</a><li><a href='#!/guide/customfields-section-availability'>Availability</a><li><a href='#!/guide/customfields-section-ios'>iOS</a></ul>\n</div>\n\n<h2 id='customfields-section-custom-objects-and-custom-fields'>Custom Objects and Custom Fields</h2>\n\n<p>ArrowDB provides many types of commonly used predefined\nobjects such as <a href=\"#!/api/Users\" rel=\"Users\" class=\"docClass\">Users</a> and <a href=\"#!/api/Photos\" rel=\"Photos\" class=\"docClass\">Photos</a>. However, you may want to create\ncustom data types, or store custom fields on predefined ArrowDB objects. Custom Objects and\nCustom Data Fields provide your application with this ability.</p>\n\n<h2 id='customfields-section-creating-custom-objects'>Creating Custom Objects</h2>\n\n<p>If you would like to create custom objects with a custom object type, please\nrefer to <a href=\"#!/api/CustomObjects\" rel=\"CustomObjects\" class=\"docClass\">CustomObjects</a> to get a list of API calls that can be used to create and access\ncustom objects.</p>\n\n<h2 id='customfields-section-adding-custom-fields-to-predefined-objects'>Adding Custom Fields to Predefined Objects</h2>\n\n<p>If you would like to store additional custom data into any predefined\nArrowDB objects, you can simply pass in JSON encoded\ncustom_fields. Any number of custom fields can be specified for an instance of\na predefined object.</p>\n\n<p>For example, if you are using the Users API and want to store the age and\nfavorite color of each user, simply include JSON encoding of custom_fields</p>\n\n<pre><code>custom_fields='{\n  \"age\": 23,\n  \"favorite_color\": \"blue\"\n}'\n</code></pre>\n\n<p>For example, to associate the above custom fields in user create</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode \"email=john.smith@company.com\" --data-urlencode \"role=teacher\" --data-urlencode \"first_name=John\" --data-urlencode \"last_name=Smith\" --data-urlencode \"password=pass\" --data-urlencode \"password_confirmation=pass\" --data-urlencode 'custom_fields={\"age\":23, \"favorite_color\":\"blue\"}' https://api.cloud.appcelerator.com/v1/users/create.json?key=&lt;YOUR APP APP KEY&gt;\n{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"createUser\",\n    \"session_id\": \"xdqCplQqcXBq8WW1ir9nzq5U4nE\"\n  },\n  \"response\": {\n    \"users\": [\n      {\n        \"id\": \"4ec5907bd9ca72020c000005\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Smith\",\n        \"created_at\": \"2011-11-17T22:53:48+0000\",\n        \"updated_at\": \"2011-11-17T22:53:48+0000\",\n        \"external_accounts\": [\n\n        ],\n        \"role\": \"teacher\",\n        \"email\": \"john.smith@company.com\",\n        \"custom_fields\": {\n          \"age\": 23,\n          \"favorite_color\": \"blue\"\n        },\n        \"stats\": {\n          \"photos\": {\n            \"total_count\": 0\n          },\n          \"storage\": {\n            \"used\": 0\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n\n<p>Custom Data are returned in the <code>custom_fields</code> JSON response field in the\ntype that was specified. Attempting to define custom fields using invalid\ntypes or an incorrect naming convention will be silently ignored.</p>\n\n<h2 id='customfields-section-supported-data-types'>Supported Data Types</h2>\n\n<table class=\"doc-table\">\n  <tr><th>Type</th><th>Example</th>\n  <tr>\n    <td>Boolean&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>true or false</td>\n  </tr>\n  <tr>\n    <td>String&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>\"blue\"</td>\n  </tr>\n  <tr>\n    <td>Number&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>23 or 1.234</td>\n  </tr>\n  <tr>\n    <td>Date&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    <td>\"2011-11-02 17:07:37 -0700\". If a string value matches date format \"yyyy-mm-dd hh:mm:ss+zzzz\" or \"yyyy-mm-ddThh:mm:ss+zzzz\", it will be converted to Date type on the Arrow backend</td>\n  </tr>\n</tr></table>\n\n\n<p>You could also store more complex data types such as Array and Hash. Hash and Array can be embedded into each other. Currently, data stored inside a Hash is not queryable.</p>\n\n<table class=\"doc-table\">\n<tr><th>Type</th><th>Example</th>\n<tr>\n  <td>Hash&nbsp;&nbsp;</td>\n  <td>{\"age\":23,\"scores\":{\"math\":90, \"physics\":100}, \"my_favorite_colors\":[\"blue\",\"red\"]}</td>\n</tr>\n<tr>\n  <td>Array&nbsp;&nbsp;</td>\n  <td>[\"nissan\", \"honda\"] or [2006, 2008], [{\"age\":28}, {\"color\":\"blue\"}]</td>\n</tr>\n</tr></table>\n\n\n<h2 id='customfields-section-indexing-size-limit-for-custom-objects-and-fields'>Indexing Size Limit for Custom Objects and Fields</h2>\n\n<p>To support efficient data query operations, ArrowDB indexes the\nfield names and values of each custom object, or custom fields you add to a predefined object. For example,\nsuppose you create a custom object, <code>cars</code>, with the fields <code>make</code> and <code>model</code>. ArrowDB will create\ntwo index entries in the MongoDB database, one for each field. The total size of an index entry,\nincluding meta-data added by ArrowDB, must be less than <strong>1024 bytes</strong> (1KB).</p>\n\n<p>If a custom field's name or value exceeds this size, then no index entry for that field is created.\nConsequently, if you run a custom <a href=\"#!/guide/search_query-section-query-overview\">query</a> against that field,\nnothing will be returned.</p>\n\n<p>For instance, in the previous example, suppose the string value assigned to <code>model</code>\nwas greater than 1KB. If you queried the <code>cars</code> collection for objects whose <code>model</code>\nmatched that value, no objects would be returned:</p>\n\n<pre><code>Cloud.Objects.query({\n    classname: 'cars',\n    where: {\n        make: {\n          $regex:\"^That Really Long Model Name*\"\n        }\n    }\n}, function (e) {\n      if (e.success) {\n        console.log(e.cars.length); // 0\n      }\n});\n</code></pre>\n\n<h2 id='customfields-section-geographic-coordinates-in-custom-fields'>Geographic Coordinates in Custom Fields</h2>\n\n<p>To enable geographical search, there is a predefined custom field,\n<code>coordinates</code>, for optionally storing geographic coordinates. The <code>coordinates</code> field can\nstore a single location as an array ( <code>[longitude, latitude]</code> ) or multiple\nlocations as an array of arrays ( <code>[[longitude1,latitude1], [longitude2, latitude2]]</code> ). So for the\nabove example, to store location information about the user, we might have:</p>\n\n<pre><code>custom_fields = '{ \"color\": \"blue\",\n    \"age\": 23,\n    \"coordinates\": [-122.1, 37.1] \n}'\n</code></pre>\n\n<h2 id='customfields-section-remove-a-field'>Remove a Field</h2>\n\n<p>If you wish to remove a custom field during update, simply set the field value\nto null.</p>\n\n<pre><code>{\n  \"age\": null\n}\n</code></pre>\n\n<h2 id='customfields-section-querying-custom-fields'>Querying Custom Fields</h2>\n\n<p>Data stored in custom fields other than Array and Hash can be queried together\nwith predefined fields. Please refer to <a href=\"#!/guide/search_query-section-query-overview\">Query</a>\nfor more information. If you define a\ncustom field name that is the same as one of predefined fields, you will be\nable to store and retrieve it but you won't be able to query on it since the\nquery action would be performed on the predefined field instead. For example,\n<a href=\"#!/api/Users\" rel=\"Users\" class=\"docClass\">Users</a> has a predefined field called <code>first_name</code>,\nif you define a custom field also called <code>first_name</code>, when you try to query\nfirst_name. it will only query against the predefined <code>first_name</code> field.</p>\n\n<h2 id='customfields-section-availability'>Availability</h2>\n\n<p>The following ArrowDB objects allow you to add one or more\nextra data fields during <code>create</code> and <code>update</code> actions:</p>\n\n<ul>\n<li><a href=\"#!/api/Chats-method-create\" rel=\"Chats-method-create\" class=\"docClass\">Chats.create</a></li>\n<li><a href=\"#!/api/Checkins-method-create\" rel=\"Checkins-method-create\" class=\"docClass\">Checkins.create</a></li>\n<li><a href=\"#!/api/PhotoCollections-method-create\" rel=\"PhotoCollections-method-create\" class=\"docClass\">PhotoCollections.create</a> and <a href=\"#!/api/PhotoCollections-method-update\" rel=\"PhotoCollections-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Events-method-create\" rel=\"Events-method-create\" class=\"docClass\">Events.create</a> and <a href=\"#!/api/Events-method-update\" rel=\"Events-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Files-method-create\" rel=\"Files-method-create\" class=\"docClass\">Files.create</a> and <a href=\"#!/api/Files-method-update\" rel=\"Files-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Messages-method-create\" rel=\"Messages-method-create\" class=\"docClass\">Messages.create</a></li>\n<li><a href=\"#!/api/Photos-method-create\" rel=\"Photos-method-create\" class=\"docClass\">Photos.create</a> and <a href=\"#!/api/Photos-method-update\" rel=\"Photos-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Places-method-create\" rel=\"Places-method-create\" class=\"docClass\">Places.create</a> and <a href=\"#!/api/Places-method-update\" rel=\"Places-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Posts-method-create\" rel=\"Posts-method-create\" class=\"docClass\">Posts.create</a> and <a href=\"#!/api/Posts-method-update\" rel=\"Posts-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Reviews-method-create\" rel=\"Reviews-method-create\" class=\"docClass\">Reviews.create</a> and <a href=\"#!/api/Reviews-method-update\" rel=\"Reviews-method-update\" class=\"docClass\">update</a></li>\n<li><a href=\"#!/api/Statuses-method-create\" rel=\"Statuses-method-create\" class=\"docClass\">Statuses.create</a></li>\n<li><a href=\"#!/api/Users-method-create\" rel=\"Users-method-create\" class=\"docClass\">Users.create</a> and <a href=\"#!/api/Users-method-update\" rel=\"Users-method-update\" class=\"docClass\">update</a></li>\n</ul>\n\n\n<h2 id='customfields-section-ios'>iOS</h2>\n\n<p>If you are using the <a href=\"#!/guide/ios\">iOS APS SDK</a>, to create an object's custom fields use a\nNSDictionary to construct the custom data you want to associate with the object.</p>\n\n<p>The following table lists the data types you can define with the iOS APS SDK:</p>\n\n<table class=\"doc-table\">\n    <tr><th>Type</th><th>Example</th><th>iOS Class</th>\n    <tr>\n      <td>String&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>\"blue\"&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>NString</td>\n    </tr>\n    <tr>\n      <td>Number&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>123 or 1.234</td>\n      <td>[NSNumber numberWithInt:] or [NSNumber numberWithDouble:]&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    </tr>\n    <tr>\n      <td>Boolean&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>true or false</td>\n      <td>[NSNumber numberWithBool:]&nbsp;&nbsp;&nbsp;&nbsp;</td>\n    </tr>\n    <tr>\n      <td>Date&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>\"2011-11-02 17:07:37 -0700\"&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>NSString</td>\n    </tr>\n    <tr>\n      <td>Hash&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>{\"age\": 23, \"color\": \"blue\"}&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>NSDictionary</td>\n    </tr>\n    <tr>\n      <td>Array&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>[123, 234] or [\"mike\", \"joe\"]&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>NSArray</td>\n    </tr>\n    <tr>\n      <td>Geo coordinates&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>[lng, lat], e.g. [122.33, 37.48]&nbsp;&nbsp;&nbsp;&nbsp;</td>\n      <td>NSArray with two NSNumber elements</td>\n    </tr>\n</tr></table>\n\n\n<p>For example, if you want to create a user with custom fields, such as\neye_color, enrolled_at, etc., you can put all the custom fields in a\nNSDictionary.</p>\n\n<pre><code>NSMutableDictionary *customFields = [NSMutableDictionary dictionary];\n[customFields setObject:@\"brown\" forKey:@\"eye_color\"]; // set a string\n[customFields setObject:@\"2011-11-02 17:07:37 -0700\" forKey:@\"enrolled_at\"]; // set a date\n[customFields setObject:[NSNumber numberWithInt:23] forKey:@\"age\"]; // set a number\n[customFields setObject:[NSNumber numberWithBool:true] forKey:@\"student\"]; // set a boolean\n[customFields setObject:[NSArray arrayWithObjects:@\"hiking\", @\"reading\", nil] forKey:@\"hobby\"]; // set an array\n[customFields setObject:[NSDictionary dictionaryWithObjectsAndKeys:@\"cookies\", @\"favorite\", nil] forKey:@\"others\"];\n\nNSMutableDictionary *params = [NSMutableDictionary dictionary];\n[params setObject:@\"john@usc.com\" forKey:@\"email\"];\n[params setObject:@\"John\" forKey:@\"first_name\"];\n[params setObject:@\"Woo\" forKey:@\"last_name\"];\n[params setObject:@\"pass\" forKey:@\"password\"];\n[params setObject:@\"pass\" forKey:@\"password_confirmation\"];\n[params setObject:customFields forKey:@\"custom_fields\"]; // add custom fields\n\n[APSUsers create:params withBlock:^(APSResponse *e){\n    if (e.success) {\n        NSArray *users = [e.response valueForKey:@\"users\"];\n        if ([users count] == 1) {\n            NSDictionary *user = users[0];\n            NSLog(@\"Successfully registered user %@\", [user valueForKey:@\"email\"]);\n            NSLog(@\"custom fields are %@\", [user valueForKey:@\"custom_fields\"]);\n        }\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n</code></pre>\n\n<p>If you would like to use your own custom data type, you need to provide a class method to JSON encode the\ndata of your object.</p>\n\n<pre><code>@interface MyObject : NSObject\n  @property NSString *color;\n  @property NSNumber *mileage;\n@end\n\n@implementation MyObject\n/*!\n Converts the object to an encodable JSON object.\n @return Object encodable as JSON, such as a NSDictionary or NSArray.\n */\n- (id)toJSON\n{\n    return [NSDictionary dictionaryWithObjectsAndKeys:self.color, @\"color\", self.mileage, @\"mileage\", nil];\n}\n@end\n\nMyObject *object = [[MyObject alloc] init];\nobject.color = @\"green\";\nobject.mileage = [NSNumber numberWithDouble:23.3];\nNSMutableDictionary *customFields = [NSMutableDictionary dictionary];\n[customFields setObject:[object toJSON] forKey:@\"MyObject\"];\n</code></pre>\n","title":"Custom Objects and Fields"});