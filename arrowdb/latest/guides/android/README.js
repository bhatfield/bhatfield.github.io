Ext.data.JsonP['android']({"guide":"<h1 id='android-section-appcelerator-platform-services-sdk-for-android-appcelerator-arrowdb-and-arrow-push'>Appcelerator Platform Services SDK for Android -- Appcelerator ArrowDB and Arrow Push</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href='#!/guide/android-section-getting-the-sdk'>Getting the SDK</a><li><a href='#!/guide/android-section-running-the-apscloudexample-application'>Running the APSCloudExample Application</a><li><a href='#!/guide/android-section-enabling-cloud-services-in-a-new-project'>Enabling Cloud services in a new Project</a><li><a href='#!/guide/android-section-making-api-calls-and-handling-responses'>Making API Calls and Handling Responses</a><ul><li><a href='#!/guide/android-section-building-request-parameters'>Building Request Parameters</a><li><a href='#!/guide/android-section-handling-responses'>Handling Responses</a><ul><li><a href='#!/guide/android-section-example-apsusers-login-call-with-response-handler'>Example: APSUsers Login Call with Response Handler</a></ul><li><a href='#!/guide/android-section-monitoring-request-progress'>Monitoring Request Progress</a><ul><li><a href='#!/guide/android-section-example-apsfiles-create-call-with-progress-handler'>Example: APSFiles Create Call with Progress Handler</a></ul></ul><li><a href='#!/guide/android-section-making-generic-rest-apis-method-calls'>Making Generic REST APIs Method Calls</a><li><a href='#!/guide/android-section-working-with-push-notifications'>Working with Push Notifications</a><ul><li><a href='#!/guide/android-section-android-project-requirements-for-using-apscloudpush'>Android Project Requirements for using APSCloudPush</a><ul><li><a href='#!/guide/android-section-add-google-play-services'>Add Google Play services</a><li><a href='#!/guide/android-section-androidmanifest-changes'>AndroidManifest changes</a></ul><li><a href='#!/guide/android-section-subscribe-to-push-notifications'>Subscribe to push notifications</a><li><a href='#!/guide/android-section-cloudpush-sample-application'>CloudPush sample application</a></ul>\n</div>\n\n<p>The Appcelerator Platform Services (APS) SDK for Android provides APIs for your Android\napplication built with Java to access ArrowDB and Arrow Push.</p>\n\n<h2 id='android-section-getting-the-sdk'>Getting the SDK</h2>\n\n<p>To download and start using the SDK, you first need to register your Android application in\n<a href=\"https://platform.appcelerator.com\">Dashboard</a>. See\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Non-Titanium_Client_Applications_in_Dashboard\">Managing Non-Titanium Client Applications in Dashboard</a>\nfor details on registering a new application. After you register the application, a service\nkey is generated that associates your application with all the Platform services. Dashboard also provides\nfull instructions for enabling all Platform Services in your application. This guide will deal specifically\nwith enabling and using ArrowDB and Arrow Push in an Android application.</p>\n\n<p><p><img src=\"guides/android/dashboard.png\" alt=\"\" width=\"671\" height=\"278\"></p></p>\n\n<h2 id='android-section-running-the-apscloudexample-application'>Running the APSCloudExample Application</h2>\n\n<p>The SDK ZIP file includes an Android sample project that demonstrates basic usage of each of the Cloud APIs.\nTo run the sample you first need to register a new application in Dashboard to obtain the necessary\nservice key. You will then copy the key into the imported sample project's main Activity\nand then run the application.</p>\n\n<p><strong>To create the APSCloudExample application in Dashboard:</strong></p>\n\n<ol>\n<li>Login to <a href=\"https://platform.appcelerator.com\">Appcelerator Dashboard</a>.</li>\n<li>From the <strong>Orgs</strong> menu, select the organization to associate with the application.\nNote that the Orgs menu will not appear if you are not a member of multiple organizations.</li>\n<li>Click the Add menu (+) and select <strong>Register App for Services</strong>.</li>\n<li>In the dialog:\n\n<ul>\n<li>Type <strong>APSCloudExampleApp</strong> (or other name) in the <strong>Name</strong> field.</li>\n<li>Select <strong>Android</strong> from the <strong>Platform</strong> menu.</li>\n<li>Select any cateogory from the <strong>Category</strong> menu.</li>\n</ul>\n</li>\n<li>Click <strong>Next</strong> and then click the <strong>Overview</strong> tab.</li>\n<li>Click the <strong>Services</strong> tab, then click <strong>Show Key</strong> under <strong>Cloud /  Performance /  Analytics</strong>.</li>\n<li>Select <strong>Development</strong> from the Environment menu, then click the clipboard icon to copy the key\nto your clipboard.</li>\n</ol>\n\n\n<p>Next, import the APSCloudExample project into Eclipse, copy the key from your clipboard\ninto the application's main activity, and run the application.</p>\n\n<p><strong>To import the completed APSCloudExample project:</strong></p>\n\n<ol>\n<li>In Eclipse, select <strong>File > Import > General > Existing Code into Workspace</strong>, then click <strong>Next</strong>.</li>\n<li>Click <strong>Browse</strong> and navigate to the <strong><code>appcelerator-sdk-android-&lt;VERSION&gt;/examples/APSCloudExample</code></strong> folder, and click <strong>Open</strong>.</li>\n<li>Click <strong>Finish</strong>.</li>\n<li>Open <strong><code>src/main/java/com/appcelerator/apscloudexample/MainActivity.java</code></strong>.</li>\n<li><p>Locate the following line of code and replace <strong>&lt;&lt; YOUR APP KEY >></strong> with the application key you\ncopied to your clipboard previously.</p>\n\n<pre><code>  APSServiceManager.getInstance().enable(getApplicationContext(), \"&lt;&lt; YOUR APP KEY &gt;&gt;\");;\n</code></pre></li>\n<li><p>Run the application on an Android device or emulator.</p></li>\n</ol>\n\n\n<p>Once the application is running, try the following:</p>\n\n<ul>\n<li>Create a new user by selecting <strong>Users > Create User</strong>. Enter a username, password and password confirmation,\nthen click <strong>Create</strong>. If the user is created successfully, the following dialog is shown:</li>\n</ul>\n\n\n<p><p><img src=\"guides/android/new_user_success.png\" alt=\"\" width=\"300\" height=\"184\"></p></p>\n\n<ul>\n<li>View the newly created user in Dashboard:\n\n<ol>\n<li>Open <a href=\"https://platform.appcelerator.com\">Dashboard</a> and select your application from the <strong>Apps</strong> menu.</li>\n<li>Select <strong>Cloud > Manage Data</strong>, then click <strong>Users</strong> in the Manage Data Object table. You\nshould see the user you created listed in the Users table.</li>\n</ol>\n</li>\n</ul>\n\n\n<p><p><img src=\"guides/android/verify_new_user.png\" alt=\"\" width=\"570\" height=\"219\"></p></p>\n\n<h2 id='android-section-enabling-cloud-services-in-a-new-project'>Enabling Cloud services in a new Project</h2>\n\n<p>Once you've\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Non-Titanium_Client_Applications_in_Dashboard\">registered an application in Dashboard</a>,\ndownloaded the SDK and obtained your application service key, there are few steps to enable Cloud services in your Android project.</p>\n\n<p><strong>To enable the Cloud services in your project</strong>:</p>\n\n<ol>\n<li>Copy <strong><code>appcelerator-sdk-android-&lt;VERSION&gt;.jar</code></strong> to your project's <code>libs</code> folder.</li>\n<li><p>Add the following permission to your project's <code>AndroidManifest.xml</code> file:</p>\n\n<pre><code> &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;`\n</code></pre></li>\n<li><p>Import the APSServiceManager class into the project's main Activity:</p>\n\n<pre><code> import com.appcelerator.aps.APSServiceManager;\n</code></pre></li>\n<li><p>Call <code>APSServiceManager.getInstance().enable()</code>, passing it the application context and the application\nkey provided by Dashboard:</p>\n\n<pre><code>  APSServiceManager.getInstance().enable(getApplicationContext(), \"&lt;&lt;YOUR APP KEY&gt;&gt;\");\n</code></pre>\n\n<p>At this point, your application can begin making API calls.  Note that the application will need to import additional\nclasses, depending on which APS APIs it uses.</p></li>\n</ol>\n\n\n<h2 id='android-section-making-api-calls-and-handling-responses'>Making API Calls and Handling Responses</h2>\n\n<p>The\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/index.html?com/appcelerator/aps/package-summary.html\">com.appcelerator.aps</a>\npackage contains a collection of classes whose methods map to individual REST API method endpoints.\nFor example, the <code>APSUsers.create()</code> method corresponds to the\n<a href=\"#!/api/Users-method-create\"><code>/users/create.json</code></a> method endpoint.</p>\n\n<p>Alternatively, you can use the generic\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSCloud.html#sendRequest%28java.lang.String%2C%20java.lang.String%2C%20java.util.Map%2C%20com.appcelerator.aps.APSResponseHandler%29\">APSCloud.sendRequest()</a>\nmethod to make REST calls directly\nagainst the Cloud APIs. For more information, see\n<a href=\"#!/guide/android-section-making-generic-rest-apis-method-calls\">Making Generic REST API Calls</a>.</p>\n\n<p><strong>Note</strong>: All Cloud API calls must be made on the UI (main) thread, and callbacks are executed\non the UI thread.</p>\n\n<h3 id='android-section-building-request-parameters'>Building Request Parameters</h3>\n\n<p>The first parameter of each Cloud API method is a <code>HashMap</code> object that contains the\nparameters to send with the request. For example, the <code>APSPhotos.show()</code> method takes a <code>photo_id</code> parameter\nwhose value is, naturally, the ID of the photo to show.</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"photo_id\", photoId);\n\nAPSPhotos.show(data, new APSResponseHandler() {\n     ...\n});\n</code></pre>\n\n<h3 id='android-section-handling-responses'>Handling Responses</h3>\n\n<p>The second parameter of each method call is an instance of\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSResponseHandler.html\">APSResponseHandler</a>,\nan interface that has the following signature:</p>\n\n<pre><code>public interface APSResponseHandler {\n    void onResponse(final APSResponse e);\n    void onException(final APSCloudException e);\n}\n</code></pre>\n\n<p>The instance you specify must override the <code>onResponse</code> and <code>onException</code> methods. The <code>onResponse</code> method is\ninvoked upon completion of a Cloud API call, and the <code>onException</code> handler is invoked if there is\nan exception while communicating with the ArrowDB server.</p>\n\n<p>The\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSResponse.html\">APSResponse</a>\nobject provides getter methods to access information about the response. For instance,\nthe <code>getSuccess()</code> method returns a boolean indicating if the method call was successful or not;\nthe <code>getResponse()</code> method returns a JSON-encoded object with the results of the method call.</p>\n\n<pre><code>@Override\npublic void onResponse(final APSResponse e) {\n    if (e.getSuccess()) {\n        // Read JSON response\n        JSONObject res = e.getResponse();\n    } else {\n        // Log error message:\n        Log.e(\"LOGIN\", e.getMessage());\n    }\n}\n</code></pre>\n\n<p>The <code>onException()</code> handler is invoked for any exceptions that occur during communication with\nthe ArrowDB server.</p>\n\n<pre><code>@Override\npublic void onException(APSCloudException e) {\n    // Handle exception\n    Log(e.getErrorType(), e.getErrorCode());\n}\n</code></pre>\n\n<h4 id='android-section-example-apsusers-login-call-with-response-handler'>Example: APSUsers Login Call with Response Handler</h4>\n\n<p>The following example logs in an existing ArrowDB user by their username and password. After a successful\nlogin, the application updates a TextView object with the user's ArrowDB username.</p>\n\n<pre><code>HashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"login\", \"username\");\ndata.put(\"password\", \"password\");\n\ntry {\n    APSUsers.login(data, new APSResponseHandler() {\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    JSONObject res = e.getResponse();\n                    // Response returns an array containing a single user\n                    JSONArray payload = res.getJSONArray(\"users\");\n                    res = payload.getJSONObject(0);\n                    loginTextView.setText(res.getString(\"username\"));\n                } catch (Exception e) {\n                    Log.e(\"LOGIN\", \"Error parsing JSON object: \" + e.toString());\n                }\n            }\n            else {\n                Log.e(\"LOGIN\", e.getMessage());\n            }\n\n        }\n        @Override\n        public void onException(APSCloudException e) {\n            // Handle exception that occured\n        }\n    });\n} catch (APSClientError e) {\n    Log.e(\"LOGIN\", e.getErrorType());\n}\n</code></pre>\n\n<h3 id='android-section-monitoring-request-progress'>Monitoring Request Progress</h3>\n\n<p>For Cloud API methods that involve uploading large files, such as <code>APSPhotos.create()</code> or <code>APSFiles.create()</code>,\nthere is an overloaded version that takes an optional <code>progressHandler</code> parameter. This parameter takes\na <a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSProgressHandler.html\">APSProgressHandler</a>\ninstance, which must provide an <code>onProgress</code> handler. This handler is periodically triggered as the file\ntransfer continues, and is passed an integer between 0-100 indicating the current upload progress.</p>\n\n<h4 id='android-section-example-apsfiles-create-call-with-progress-handler'>Example: APSFiles Create Call with Progress Handler</h4>\n\n<p>The following example uploads a file from the device (<code>/res/raw/reference.pdf</code>) to the ArrowDB storage server.\nSince the method call requires that uploaded data be an instance of <code>java.io.File</code>, the application needs to copy the\nresource to a read-write directory before uploading it. Storing the file locally requires that the\n<a href=\"http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE\">WRITE_EXTERNAL_STORAGE</a>\npermission be included in your AndroidManifest.xml file.</p>\n\n<p>The progress callback calls the <code>setProgress()</code> method on a <code>ProgressBar</code> object, displaying the\nstatus of the upload. After the request successfully completes, the application displays a toast notification.</p>\n\n<pre><code>HashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\nString filename = \"reference.pdf\";\n\n// Need to copy the resource to a read-write directory to upload it\nif (!createExternalStoragePrivateFile(R.raw.reference, filename)) return;\n\nFile file = new File(currentActivity.getExternalFilesDir(null), filename);\ndata.put(\"file\", file);\ndata.put(\"name\", \"Reference Manual\");\n\ntry {\n    APSFiles.create(data, new APSClient.APSResponseHandler() {\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                APSCloud.log(\"PUSH\", \"Successfully subscribed to push!\");\n                progressBar.setVisibility(View.GONE);\n                Toast.makeText(currentActivity, \"File uploaded!\", Toast.LENGTH_SHORT).show();\n            }\n            else {\n                Log.e(\"UPLOAD\", e.getMessage());\n            }\n        }\n    },\n    new APSClient.APSProgressHandler() {\n        @Override\n        public void onProgress(final int percentProgress, final boolean upload) {\n            if (currentActivity != null) {\n                progressBar.setProgress(percentProgress);\n        }\n    });\n} catch (APSClientError e) {\n    Log.e(\"UPLOAD\", e.getMessage());\n}\n\n// Helper function to copy a resource to external storage, modified from:\n// http://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String)\n\npublic static boolean createExternalStoragePrivateFile(int inputResource, String filename) {\n    File file = new File(currentActivity.getExternalFilesDir(null), filename);\n    try {\n        InputStream is = currentActivity.getResources().openRawResource(inputResource);\n        OutputStream os = new FileOutputStream(file);\n        byte[] data = new byte[is.available()];\n        is.read(data);\n        os.write(data);\n        is.close();\n        os.close();\n        return true;\n    } catch (IOException e) {\n        Log.w(\"ExternalStorage\", \"Error writing \" + file, e);\n        return false;\n    }\n}\n</code></pre>\n\n<h2 id='android-section-making-generic-rest-apis-method-calls'>Making Generic REST APIs Method Calls</h2>\n\n<p>The\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSCloud.html#sendRequest%28java.lang.String%2C%20java.lang.String%2C%20java.util.Map%2C%20com.appcelerator.aps.APSResponseHandler%29\"><code>APSCloud.sendRequest()</code></a>\nmethod lets you easily make REST API calls directly against\nArrowDB, rather than using the specialized classes (like <code>APSUsers</code>). In general, you\nshould use the specialized classes as they provide an easier API. However, if new REST methods\nare deployed to the APS Cloud backend, this approach lets you immediately start\nusing those methods without waiting for an update to the SDK.</p>\n\n<p>To make a generic request, you call <code>APSCloud.getInstance()</code> to get a reference to the shared APSCloud\nobject and call its <code>sendRequest()</code> method. For each call, you must specify the following:</p>\n\n<ul>\n<li>REST API method endpoint relative to \"api.cloud.appcelerator.com/v1\". Method endpoints are listed in the corresponding entries in the\n<a href=\"#!/api\">REST API documentation</a>.</li>\n<li>The HTTP method to use.</li>\n<li>Data to send with the request.</li>\n</ul>\n\n\n<p>For example, to <a href=\"#!/api/Posts-method-create\">create a post</a>,\npass the <code>sendRequest()</code> method the following information:</p>\n\n<ul>\n<li>REST API method endpoint: <code>posts/create.json</code></li>\n<li>The HTTP method to use: <code>POST</code></li>\n<li>Data to send with the request: at minimum, you must specify the <code>content</code> property.</li>\n</ul>\n\n\n<p>The following uses the <code>sendRequest()</code> API to create a new Post object.</p>\n\n<pre><code>HashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"title\", \"What's up?\");\ndata.put(\"content\", \"The sun, the cloud, space...\");\n\ntry {\n    APSCloud.getInstance().sendRequest(\"posts/create.json\", \"POST\", data, new APSClient.APSResponseHandler() {\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    JSONObject res = e.getResponse();\n                    JSONArray payload = res.getJSONArray(\"posts\");\n                    res = payload.getJSONObject(0);\n                    latestPost.setText(res.getString(\"title\"));\n                } catch (Exception err) {\n                    Log.e(\"REST\", \"JSON Error: \" + err.getMessage());\n                }\n            }\n            else {\n                Log.e(\"REST\", e.getMessage());\n            }\n        }\n    });\n} catch (APSClientError e) {\n    Log.e(\"REST\", \"Error: \" + e.getMessage());\n}\n</code></pre>\n\n<h2 id='android-section-working-with-push-notifications'>Working with Push Notifications</h2>\n\n<p>The  <a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSPushNotifications.html\"><code>APSPushNotifications</code></a>\nclass lets your application subscribe, send and receive push notifications. To use the class, you also need the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSCloudPush.html\"><code>APSCloudPush</code></a>\nclass, which provides the underlying services to handle incoming push notifications.</p>\n\n<p>To use these classes:</p>\n\n<ul>\n<li><a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Configuring_push_services-section-37551713_Configuringpushservices-ConfiguringpushservicesforAndroiddevices\">Configure push services</a>\nfor your application.</li>\n<li>Add Google Play services as a depedency to your project and update the project's <code>AndroidManifest.xml</code> file.\nSee the <a href=\"#!/guide/android-section-android-project-requirements-for-using-apscloudpush\">Android Project Requirements section below</a>.</li>\n<li>Retrieve the device token and subscribe to push notifications with Arrow Push.\nSee the <a href=\"#!/guide/android-section-subscribe-to-push-notifications\">Subscribe to push notifications section below</a>.</li>\n</ul>\n\n\n<h3 id='android-section-android-project-requirements-for-using-apscloudpush'>Android Project Requirements for using APSCloudPush</h3>\n\n<p>Once you have configured your GCM settings in Dashboard, there are some required configuration changes\nto your Android project to use <code>APSCloudPush</code>.</p>\n\n<h4 id='android-section-add-google-play-services'>Add Google Play services</h4>\n\n<p><code>APSCloudPush</code> requires that Google Play services be included in your application.</p>\n\n<ol>\n<li>Download the Google Play services SDK using the Android SDK Manager.</li>\n<li>Copy the  <code>&lt;android-sdk&gt;/extras/google/google_play_services/libproject/google-play-services_lib</code> folder\nto the same workspace folder as your Android projects (not into your Android project).</li>\n<li><p>Add the following inside the <strong><code>&lt;application/&gt;</code></strong> element of your <code>AndroidManifest.xml</code> file:</p>\n\n<pre><code> &lt;meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" /&gt;\n</code></pre></li>\n</ol>\n\n\n<p>For <strong>Android Studio</strong> projects, update the <code>dependencies</code> field of the <code>build.gradle</code> file,\nthen save and sync the gradle file.</p>\n\n<pre><code>...\ndependencies {\n    ...\n    compile 'com.google.android.gms:play-services:6.5.87'\n}\n</code></pre>\n\n<p>For <strong>Eclipse</strong> projects:</p>\n\n<ol>\n<li>Import the library project into Eclipse. (From the menu, click <strong>File</strong> > <strong>Import</strong>, then select\n<strong>Android</strong> > <strong>Existing Android Code into Workspace</strong>, and browse to the copy of the library project to import it.)</li>\n<li>In the application project, reference the Google Play services library project. (Right-click the\nproject folder and select <strong>Properties</strong>, then select <strong>Android</strong>, click <strong>Add..</strong> and select the\nlibrary project.)</li>\n</ol>\n\n\n<p>For other projects, update the <code>project.properties</code> file to reference the library project:</p>\n\n<pre><code>android.library.reference.1=../google-play-services_lib\n</code></pre>\n\n<p>For detailed directions, see\n<a href=\"http://developer.android.com/google/play-services/setup.html\">Android Developer: Setting Up Google Play Services</a>.</p>\n\n<h4 id='android-section-androidmanifest-changes'>AndroidManifest changes</h4>\n\n<p>The following changes must be added to your project's\n<code>AndroidManifest.xml</code> to use <code>APSCloudPush</code>. Replace each occurence of <em>\"YOURAPPSPACKAGENAME\"</em>\nwith the actual package name of your application.</p>\n\n<ul>\n<li><p>Inside the <code>&lt;manifest/&gt;</code> element:</p>\n\n<pre><code>  &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.GET_ACCOUNTS\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.WAKE_LOCK\"/&gt;\n  &lt;uses-permission android:name=\"com.google.android.c2dm.permission.RECEIVE\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\n           android:maxSdkVersion=\"18\" /&gt;\n  &lt;permission android:name=\"YOURAPPSPACKAGENAME.permission.C2D_MESSAGE\"\n              android:protectionLevel=\"signature\"/&gt;\n  &lt;uses-permission android:name=\"YOURAPPSPACKAGENAME.permission.C2D_MESSAGE\"/&gt;\n</code></pre></li>\n<li><p>Inside the <code>&lt;application/&gt;</code> element:</p>\n\n<pre><code>  &lt;receiver android:name=\"com.appcelerator.aps.IntentReceiver\"/&gt;\n  &lt;receiver\n          android:name=\"com.appcelerator.aps.GCMReceiver\"\n          android:permission=\"com.google.android.c2dm.permission.SEND\"&gt;\n      &lt;intent-filter&gt;\n          &lt;action android:name=\"com.google.android.c2dm.intent.RECEIVE\"/&gt;\n          &lt;category android:name=\"YOURAPPSPACKAGENAME\"/&gt;\n      &lt;/intent-filter&gt;\n  &lt;/receiver&gt;\n  &lt;receiver android:name=\"com.appcelerator.aps.PushBroadcastReceiver\"\n          android:permission=\"com.google.android.c2dm.permission.SEND\"&gt;\n      &lt;intent-filter&gt;\n          &lt;action android:name=\"android.intent.action.BOOT_COMPLETED\"/&gt;\n          &lt;action android:name=\"com.google.android.c2dm.intent.REGISTRATION\" /&gt;\n          &lt;action android:name=\"com.appcelerator.aps.intent.DEL_GROUPED_MSG\" /&gt;\n          &lt;category android:name=\"YOURAPPSPACKAGENAME\" /&gt;\n      &lt;/intent-filter&gt;\n  &lt;/receiver&gt;\n  &lt;receiver android:name=\"com.appcelerator.aps.PushBroadcastReceiver\"&gt;\n      &lt;intent-filter&gt;\n          &lt;action android:name=\"android.intent.action.PACKAGE_ADDED\"/&gt;\n          &lt;action android:name=\"android.intent.action.PACKAGE_REPLACED\"/&gt;\n          &lt;data android:scheme=\"package\" android:path=\"YOURAPPSPACKAGENAME\" /&gt;\n      &lt;/intent-filter&gt;\n  &lt;/receiver&gt;\n</code></pre></li>\n</ul>\n\n\n<h3 id='android-section-subscribe-to-push-notifications'>Subscribe to push notifications</h3>\n\n<p>Once the project is setup, the application needs to register with Arrow Push to receive push\nnotifications. The application should do this once the application starts, for example, in the\n<code>onCreate()</code> method of the application's main activity.</p>\n\n<p>To register for push notifications, the application needs to retrieve the device token using the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSCloudPush.html#retrieveDeviceToken%28com.appcelerator.aps.APSRetrieveDeviceTokenHandler%29\"><code>APSCloudPush.getInstance.retrieveDeviceToken()</code></a>\nmethod, then pass the token to either the\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSPushNotifications.html#subscribe%28java.util.Map%2Ccom.appcelerator.aps.APSResponseHandler%29\"><code>APSPushNotifications.subscribe()</code></a>\nor\n<a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSPushNotifications.html#subscribeToken%28java.util.Map%2Ccom.appcelerator.aps.APSResponseHandler%29\"><code>APSPushNotifications.subscribeToken()</code></a>\nmethod to subscribe to a push channel.</p>\n\n<p><strong>Note:</strong> Call <a href=\"http://docs.appcelerator.com/aps-sdk-apidoc/latest/android/com/appcelerator/aps/APSServiceManager.html#getInstance%28%29\"><code>APSServiceManager.getInstance()</code></a>\nbefore calling any methods on <code>APSCloudPush</code>, otherwise an exception will be thrown.</p>\n\n<p>For example, the code below can be added to the main activity's <code>onCreate()</code> method to subscribe the\ndevice to the <code>friend_channel</code>:</p>\n\n<pre><code>APSCloudPush.getInstance().retrieveDeviceToken(new APSRetrieveDeviceTokenHandler() {\n    @Override\n    public void onError(String message) {\n        Log.e(\"APSCloudPush\", \"Could not retrieve device token: \" + message);\n    }\n\n    @Override\n    public void onSuccess(String deviceToken) {\n        HashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\n        data.put(\"type\", \"android\");\n        data.put(\"channel\", \"friend_channel\");\n        data.put(\"device_token\", deviceToken);\n        try {\n            APSPushNotifications.subscribeToken(data, new APSResponseHandler() {\n\n                @Override\n                public void onResponse(final APSResponse e) {\n                    if (e.getSuccess()) {\n                        Log.i(\"APSPushNotifications\", \"Subscribed!\");\n                    } else {\n                        Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n                    }\n                }\n\n                @Override\n                public void onException(final APSCloudException e) {\n                    Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n                }\n            });\n        } catch (APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n        }\n    }\n});\n</code></pre>\n\n<p>Once push services have been configured, and you've obtained a device token by registering your\napplication to receive push notifications, you can start calling methods of the\n<code>APSCloudPush</code> and <code>APSPushNotifications</code> classes.</p>\n\n<h3 id='android-section-cloudpush-sample-application'>CloudPush sample application</h3>\n\n<p>The SDK includes the <code>APSCloudPushExample</code> application that demonstrates use of the <code>APSPushNotifications</code>\nand <code>APSCloudPush</code> APIs. To run the sample application, you'll first need to create an Android application\nin Dashboard (or use an existing application), and configure its push notification\nsettings to include a GCM sender ID and application key. <code>APSCloudPush</code> requires Google Play services,\nso you'll also need to add that library as a dependency to your project.</p>\n\n<p><strong>To import and run the APSCloudPushExample application</strong>:</p>\n\n<ol>\n<li>In Eclipse, select <strong>File > Import > General > Existing Projects into Workspace</strong> and click <strong>Browse</strong>.</li>\n<li>Navigate to the <strong><code>appcelerator-sdk-android-&lt;VERSION&gt;/examples/APSCloudPushExample</code></strong> folder and click <strong>Open</strong>.</li>\n<li>Click <strong>Finish</strong> to import the project.</li>\n<li>Add the Google Play services to your project (see <a href=\"#!/guide/android-section-android-project-requirements-for-using-apscloudpush\">Android Project Requirements</a> for instructions).</li>\n<li><p>In MainActivity.java, locate the following line and replace <strong>&lt;&lt; YOUR APP KEY >></strong> with the application\nkey generated by Dashboard (see <a href=\"http://docs.appcelerator.com/platform/redirects/aps_key.html\">instructions</a>):</p>\n\n<pre><code>  String appKey = \"&lt;&lt; YOUR APP KEY &gt;&gt;\";\n</code></pre></li>\n<li>Run the application in an Android device or emulator.</li>\n</ol>\n\n","title":"Android SDK"});