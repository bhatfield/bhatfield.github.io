Ext.data.JsonP['nodejs']({"guide":"<h1 id='nodejs-section-arrowdb-sdk-for-node-js'>ArrowDB SDK for Node.js</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href='#!/guide/nodejs-section-installation'>Installation</a><li><a href='#!/guide/nodejs-section-api-usage'>API Usage</a><ul><li><a href='#!/guide/nodejs-section-setup'>Setup</a><li><a href='#!/guide/nodejs-section-standard-arrowdb-apis'>Standard ArrowDB APIs</a><li><a href='#!/guide/nodejs-section-generic-arrowdb-apis'>Generic ArrowDB APIs</a></ul><li><a href='#!/guide/nodejs-section-user-login-session-management'>User Login Session Management</a><ul><li><a href='#!/guide/nodejs-section-cookie-based-session-management'>Cookie-Based Session Management</a><li><a href='#!/guide/nodejs-section-manual-session-management'>Manual Session Management</a></ul>\n</div>\n\n<p>The ArrowDB Node SDK lets you easily integrate ArrowDB services with your Node.js application.\nThe SDK provides two APIs:</p>\n\n<ul>\n<li>An API for each class and method.</li>\n<li>A set of generic REST APIs.</li>\n</ul>\n\n\n<p>Your Node application can optionally handle session data itself. For more information see,\n<a href=\"#!/guide/nodejs-section-user-login-session-management\">User Login Session Management</a>.</p>\n\n<h2 id='nodejs-section-installation'>Installation</h2>\n\n<p>To use the module within your Node application, add the <code>arrowdb</code> module to the <code>dependencies</code>\nsection of your <code>package.json</code> file, as follows:</p>\n\n<pre><code>\"dependencies\": {\n  \"arrowdb\": \"&gt;=1.0.6\"\n}\n</code></pre>\n\n<p>You can then run <code>npm install</code> from your application folder to install the module and its dependencies.</p>\n\n<p>You can also install the module directly using <code>npm</code>:</p>\n\n<pre><code>[sudo] npm install arrowdb\n</code></pre>\n\n<p>As of this writing, the latest version is <strong>1.0.6</strong>.</p>\n\n<h2 id='nodejs-section-api-usage'>API Usage</h2>\n\n<h3 id='nodejs-section-setup'>Setup</h3>\n\n<p>To use the ArrowDB APIs, load the <code>arrowdb</code> module, then create an instance with the <code>new</code> constructor,\npassing it your ArrowDB application key. Invoke API calls on the instance.</p>\n\n<pre><code>var ArrowDB = require('arrowdb'),\n    arrowDBApp = new ArrowDB('&lt;App Key&gt;');\narrowDBApp.usersLogin(params, callback);\n</code></pre>\n\n<p>This only needs to be done once, typically in the main <code>app.js</code> script file.</p>\n\n<p>You may optionally pass the constructor an object as the second argument.\nYou may set the following properties on the object:</p>\n\n<ul>\n<li><code>apiEntryPoint</code>: Base URL of the ArrowDB server.  By default, it is <code>https://api.cloud.appcelerator.com</code>.</li>\n<li><code>autoSessionManagement</code>: Set to <code>false</code> to manually manage the session cookie or session ID.\nBy default, it is <code>true</code> and the SDK automatically handles the sessions.</li>\n<li><code>prettyJson</code>: Set to <code>true</code> to enable the <code>pretty_json</code> parameter for all API calls.\nBy default, the value is undefined and behaves as false.</li>\n<li><code>responseJsonDepth</code>: Sets the <code>response_json_depth</code> parameter for all API calls. By default, the\nvalue is <code>1</code>. You may the set value from 1 to 8.</li>\n</ul>\n\n\n<p>For example:</p>\n\n<pre><code>var ArrowDB = require('arrowdb'),\n    arrowDBApp = new ArrowDB('&lt;App Key&gt;', {\n        apiEntryPoint: 'https://api.cloud.appcelerator.com'\n        autoSessionManagement: false,\n        prettyJson: true,\n        responseJsonDepth: 3\n    });\n</code></pre>\n\n<h3 id='nodejs-section-standard-arrowdb-apis'>Standard ArrowDB APIs</h3>\n\n<p>The standard ArrowDB APIs provide a standardized API name for each REST object and method.\nInvoke the method on the ArrowDB SDK instance.</p>\n\n<p>The API name of most of the standard ArrowDB Node API calls is the concatenation of the\nREST class name and method in lower camel case notation.  For example, the Users object login\nmethod will be <code>usersLogin</code>.  Check the Node example of the method to see its exact name.</p>\n\n<p>Pass each method an optional parameters object and a required callback.</p>\n\n<p>Set any method parameters on the parameters object. The parameters object may be omitted.\nFor middleware calls, such as Express, you may optionally pass the request and response objects to the\nparameters object using the <code>req</code> and <code>res</code> keys, respectively.</p>\n\n<p>The callback is passed an Error object (or null if successful) and the results of the method call.\nThe results object contains the following properties:</p>\n\n<ul>\n<li><code>body</code>: HTTP response body as a JSON object.</li>\n<li><code>cookieString</code>: Session cookie string if the API returns a session ID else it will be an empty string.</li>\n<li><code>reason</code>: HTTP error message.</li>\n<li><code>response</code>: <a href=\"https://nodejs.org/docs/latest/api/http.html#http_class_http_serverresponse\">Node.js http.ServerResponse object</a>.</li>\n<li><code>statusCode</code>: HTTP status code.</li>\n</ul>\n\n\n<p>To access the results from the returned object, use the object's <code>body</code> property\nto access the HTTP response body. The body object will contain a <code>meta</code> object,\nwhich contains the metadata of the response, and a <code>response</code> object, which contains the\nresults of the method call.</p>\n\n<p>Below is a more complete example that uses the standard ArrowDB APIs to\nlogin a user. It defines a custom <code>login()</code> function that takes the <code>username</code> and <code>password</code>\nproperties from the HTTP request body, and in turn, passes those values as input to the\n<a href=\"http://docs.appcelerator.com/arrowdb/latest/#!/api/Users-method-login\"><code>Users.login()</code></a> method. On\nsuccessful login, the user's information is displayed in the console or, in case of an error, the\nerror response is displayed.</p>\n\n<pre><code>var ArrowDB = require('arrowdb'),\n    arrowDBApp = new ArrowDB('&lt;App Key&gt;');\nfunction login(req, res) {\n    var data = {\n        login: req.body.username,\n        password: req.body.password,\n        // the req and res parameters are optional\n        req: req,\n        res: res\n    };\n    arrowDBApp.usersLogin(data, function(err, result) {\n        if (err) {\n            console.error(\"Login error:\" + (err.message || result.reason));\n        } else {\n            console.log(\"Login successful!\");\n            console.log(\"UserInfo: \" + JSON.stringify(result.body.response.users[0]));\n        }\n    });\n}\n</code></pre>\n\n<h3 id='nodejs-section-generic-arrowdb-apis'>Generic ArrowDB APIs</h3>\n\n<p>The ArrowDB Node SDK provides the following four methods to make generic calls to ArrowDB:</p>\n\n<ul>\n<li><code><em>sdkObject</em>.post(<em>path</em>, <em>parameters</em>, <em>callback</em>)</code></li>\n<li><code><em>sdkObject</em>.put(<em>path</em>, <em>parameters</em>, <em>callback</em>)</code></li>\n<li><code><em>sdkObject</em>.get(<em>path</em>, <em>parameters</em>, <em>callback</em>)</code></li>\n<li><code><em>sdkObject</em>.delete(<em>path</em>, <em>parameters</em>, <em>callback</em>)</code></li>\n</ul>\n\n\n<p>Each method is passed the following parameters:</p>\n\n<ul>\n<li><code>path</code> -- The path of the REST resource to call relative to the base URL (by default, it is <code>https://api.cloud.appcelerator.com</code>).</li>\n<li><code>parameters</code> -- The parameters to pass to the method. May be omitted.</li>\n<li><code>callback</code> -- The function to call when the request completes.\nThe callback is passed an Error object (or null if successful) and the results of the method call.</li>\n</ul>\n\n\n<p>Below is a complete REST example that is functionally equivalent to the previous version\nthat used the standard ArrowDB APIs.</p>\n\n<pre><code>var ArrowDB = require('arrowdb'),\n    arrowDBApp = new ArrowDB('&lt;App Key&gt;');\nfunction login(req, res) {\n    var data = {\n        login: req.body.username,\n        password: req.body.password\n    };\n    arrowDBApp.post('/v1/users/login.json', data, function(err, result) {\n        if (err) {\n            console.error(\"Login error:\" + (err.message || result.reason));\n        } else {\n            console.log(\"Login successful!\");\n            console.log(\"UserInfo: \" + JSON.stringify(result.body.response.users[0]));\n        }\n    });\n}\n</code></pre>\n\n<h2 id='nodejs-section-user-login-session-management'>User Login Session Management</h2>\n\n<p>Most of the ArrowDB APIs require a user to be logged in, so it is important to have a\nway to manage user sessions in your Node.js application. The ArrowDB Node SDK provides\ntwo ways of managing ArrowDB login sessions in a Node.js application:</p>\n\n<ul>\n<li><strong>Cookie-based</strong>. Cookies are used to store session information, and passed between the client and server.</li>\n<li><strong>Session ID</strong>. Must pass a session ID with every API call.</li>\n</ul>\n\n\n<p>These methods are described in the following sections.</p>\n\n<h3 id='nodejs-section-cookie-based-session-management'>Cookie-Based Session Management</h3>\n\n<p>Cookies are frequently used by ArrowDB applications to store session information\nand are passed between the client and server.</p>\n\n<p>The ArrowDB Node SDK retrieves the session ID from the request's cookies. If a\n<code>_session_id</code> cookie is present, it uses that session ID to make the ArrowDB API\ncall. If not, it performs a regular API call without session information.</p>\n\n<p>If a session ID is returned in the API response (for example,\n<code>users/login.json</code>), the session information is added into the response\nobject. Specifically, it adds a <code>Set-Cookie</code> header to pass back to the client.</p>\n\n<p>To manually manage cookie sessions, disable automatic session management by passing an object as the\nsecond parameter to the constructor with the <code>autoSessionManagement</code> property set to <code>false</code>.\nArrowDB will no longer automatically retrieve and set the session cookie.  You must manually set\nthe ArrowDB instance's <code>sessionCookieString</code> property once you retrieve a cookie string.\nThe cookie string will be available as the <code>cookieString</code> property in the callback's result object\nif the API response returns a session ID.</p>\n\n<p>The example below retrieves and sets the cookie string:</p>\n\n<pre><code>var ArrowDB = require('arrowdb'),\n    arrowDBApp = new ArrowDB('&lt;App Key&gt;', {autoSessionManagement: false});\nfunction login(req, res) {\n    var data = {\n        login: req.body.username,\n        password: req.body.password\n    };\n    arrowDBApp.post('/v1/users/login.json', data, function(err, result){\n        if (err) {\n            console.error(\"Login error:\" + (err.message || result.reason));\n        } else {\n            console.log(\"Login successful!\");\n            arrowDBApp.sessionCookieString = result.cookieString;\n        }\n    });\n}\n</code></pre>\n\n<p><strong>Important</strong></p>\n\n<ul>\n<li><p>The ArrowDB Node SDK sets the cookie header in the response object, which must be done <em>before</em>\nsending any response data (for example, by calling the response object's <code>send</code> method). If you\nsend any response data <em>before</em> the API callback function is invoked, the ArrowDB Node SDK will\nthrow an exception when it tries to set the cookie headers, with a message like, \"Can't render\nheaders after they are sent to the client.\"</p></li>\n<li><p>Session information is stored in a cookie named <code>_session_id</code>. You can also manually set this\nsession ID cookie on the client side. For example, if you are calling your Arrow Cloud service from\na Titanium application that uses ArrowDB directly, you can retrieve the active session ID from the\n<a href=\"http://docs.appcelerator.com/titanium/latest/#!/api/Titanium.Cloud-%0Aproperty-sessionId\">Titanium.Cloud.sessionId</a> property, and adding a <code>Set-Cookie</code> header when making a request to the\nArrow Cloud service.</p></li>\n</ul>\n\n\n<h3 id='nodejs-section-manual-session-management'>Manual Session Management</h3>\n\n<p>An ArrowDB user login session is identified by a <code>session_id</code> parameter in the\nrequest or response data. When logging in to a user account or creating a new\nuser, the <code>session_id</code> is returned in the response data of the API calls. It\ncan be retrieved from the response data by using the <code>body.meta.session_id</code> property of the callback's\nresult object. For example:</p>\n\n<pre><code>function loginUser(req, res) {\n    arrowDBApp.usersLogin({\n        login: 'test',\n        password: 'test'\n    }, function(err, result) {\n        console.log('Login session is: ' + result.body.meta.session_id);\n    });\n}\n</code></pre>\n\n<p>To reuse this session for making other API calls, pass it in as part of the\nrequest parameters (<code>session_id: _stored_session_id_</code>). This gives you full control\nof the sessions. You can store the session in any ways and reuse them anytime\n(as long as the session is not expired on the ArrowDB server) later for making API\ncalls. For example:</p>\n\n<pre><code>function createPlace(req, res) {\n    arrowDBApp.placesCreate({\n        name: 'test',\n        city: 'city_name',\n        session_id: '&lt;stored session_id&gt;'\n    }, function(err, result) {\n        console.log('New place created!');\n    });\n}\n</code></pre>\n","title":"Node SDK"});