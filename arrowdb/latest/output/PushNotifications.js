Ext.data.JsonP['PushNotifications']({"tagname":"class","name":"PushNotifications","alternateClassNames":[],"mixins":[],"meta":{},"aliases":{},"files":[{"filename":"query.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/query.yml"},{"filename":"channels_query.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/channels_query.yml"},{"filename":"set_badge.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/set_badge.yml"},{"filename":"notify_tokens.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/notify_tokens.yml"},{"filename":"unsubscribe.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/unsubscribe.yml"},{"filename":"subscribe_token.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/subscribe_token.yml"},{"filename":"count.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/count.yml"},{"filename":"reset_badge.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/reset_badge.yml"},{"filename":"unsubscribe_token.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/unsubscribe_token.yml"},{"filename":"notify.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/notify.yml"},{"filename":"subscribe.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/subscribe.yml"},{"filename":"PushNotifications.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/PushNotifications.yml"},{"filename":"subscription_update.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/subscription_update.yml"},{"filename":"channels_show.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PushNotifications/channels_show.yml"}],"members":{"cfg":[],"property":[],"method":[{"name":"push_notification/channels/query.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-channels_query"},{"name":"push_notification/channels/show.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":true},"id":"method-channels_show"},{"name":"push_notification/count.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-count"},{"name":"push_notification/notify.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-notify"},{"name":"push_notification/notify_tokens.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-notify_tokens"},{"name":"push_notification/query.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-query"},{"name":"push_notification/reset_badge.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-reset_badge"},{"name":"push_notification/set_badge.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-set_badge"},{"name":"push_notification/subscribe.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-subscribe"},{"name":"push_notification/subscribe_token.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-subscribe_token"},{"name":"push_notification/subscription/update.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-subscription_update"},{"name":"push_notification/unsubscribe.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-unsubscribe"},{"name":"push_notification/unsubscribe_token.json","tagname":"method","owner":"PushNotifications","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-unsubscribe_token"}],"event":[],"css_var":[],"css_mixin":[]},"extends":null,"singleton":null,"private":null,"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='sidebar'></div><div class='hierarchy'></div><div class='doc-contents'><p>The Push Notifications API lets you send push notifications to your users who are on iOS and\nAndroid Devices. You can also send a system push notification to all users from the Admin\nConsole.</p>\n\n<p>Please refer to the Push Notifications sections of the <a href=\"#!/guide/android\">Android SDK guide</a>\nor the <a href=\"#!/guide/ios\">iOS SDK guide</a> to set up your app for push notifications to\nAndroid or iOS.</p>\n\n<p>To setup Titanium applications, refer to the\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Push_Notifications\">Push Notification guide</a>.</p>\n\n<p>The Push Notifications API provides two mechanisms to register and send push notifications.  One\nrelies on the user session, which requires the user to be logged in to receive push notifications.\nThe other method uses devices tokens, which does not require the user to be logged in to\nreceive notifications.  If you are using the Titanium API, push notifications with device tokens\nrequire Titanium SDK 3.1.2 and later.</p>\n\n<h3>Android Notes</h3>\n\n<h4>Device Support</h4>\n\n<p>GCM supports devices that run Android 2.2 and later, and requires that the Google Play Store\napplication be installed. For pre-4.0 devices, the user is required to set up their Google account.</p>\n\n<h4>Optional Payload Fields</h4>\n\n<p>On Android, you can specify the following optional fields in the <code>payload</code> parameter of the\n<a href=\"#!/api/PushNotifications-method-notify_tokens\" rel=\"PushNotifications-method-notify_tokens\" class=\"docClass\">notify_tokens</a> or <a href=\"#!/api/PushNotifications-method-notify\" rel=\"PushNotifications-method-notify\" class=\"docClass\">notify</a> method:</p>\n\n<ul>\n<li><code>icon</code> (String): Filename minus the extension of the\nicon to display in the notification center. Place the file in <code>/res/drawable</code>\nfor Android applications or <code>/Resources</code> for Titanium applications.\nUses the app's icon by default.</li>\n<li><code>title</code> (String): Title of the notification.</li>\n<li><code>vibrate</code> (Boolean): If true, the device vibrates for one second.</li>\n</ul>\n\n\n<h3>Badges</h3>\n\n<p>When sending a push notification, you can specify a badge value, which is usually used to indicate the\nnumber of unread messages or other content waiting to be addressed by the user in your application.</p>\n\n<p>On Android, the badge number is displayed in the notification center, while on iOS, the badge\nnumber is displayed with the application icon.</p>\n\n<p>When setting the value of the badge, you can either directly set the badge number, or\nincrement and decrement the current value of the badge. Set the <code>badge</code> field in the <code>payload</code>\nparameter of the <a href=\"#!/api/PushNotifications-method-notify_tokens\" rel=\"PushNotifications-method-notify_tokens\" class=\"docClass\">notify_tokens</a> or <a href=\"#!/api/PushNotifications-method-notify\" rel=\"PushNotifications-method-notify\" class=\"docClass\">notify</a>\nmethod to specify a value for the badge.</p>\n\n<p>Prefix the number with either the <code>+</code> or <code>-</code> symbol to increment or decrement the current value,\nrespectively.  Omit the prefix to directly set the value.</p>\n\n<p>For example, the value <code>+2</code> increments the current badge value by two, the value <code>-1</code>,\ndecrements the badge value by one, and the value <code>12</code> sets the badge value to twelve.</p>\n\n<p>Use the following methods to set the internally stored value of the badge and not update the\ndisplayed value in the application:</p>\n\n<ul>\n<li><a href=\"#!/api/PushNotifications-method-set_badge\" rel=\"PushNotifications-method-set_badge\" class=\"docClass\">set_badge</a>: set, increment or decrement the value of the badge</li>\n<li><a href=\"#!/api/PushNotifications-method-reset_badge_put\">reset_badge</a>: set the value of the badge to zero</li>\n</ul>\n\n\n<p>To update the displayed value in the application, you need to send a push notification with the\n<code>badge</code> field defined.</p>\n\n<h3>Push Notifications with Device Tokens</h3>\n\n<p>The methods with the <code>_token</code> suffix rely on the device's token to subscribe, receive, send or\nunsubscribe from push notifications:</p>\n\n<ul>\n<li><a href=\"#!/api/PushNotifications-method-subscribe_token\" rel=\"PushNotifications-method-subscribe_token\" class=\"docClass\">subscribe_token</a></li>\n<li><a href=\"#!/api/PushNotifications-method-notify_tokens\" rel=\"PushNotifications-method-notify_tokens\" class=\"docClass\">notify_tokens</a></li>\n<li><a href=\"#!/api/PushNotifications-method-unsubscribe_token\" rel=\"PushNotifications-method-unsubscribe_token\" class=\"docClass\">unsubscribe_token</a></li>\n</ul>\n\n\n<p>To retrieve your device token using the Android or iOS SDK API, refer to the\nPush Notifications sections of the <a href=\"#!/guide/android\">Android SDK guide</a>\nor the <a href=\"#!/guide/ios\">iOS SDK guide</a>.</p>\n\n<p>To retrieve your device token using the Titanium SDK API:</p>\n\n<ul>\n<li><p>For Android, use the\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/api/Modules.CloudPush\">Modules.CloudPush</a>\nmodule.</p></li>\n<li><p>For iOS, use the\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/api/Titanium.Network-method-registerForPushNotifications\">Titanium.Network.registerForPushNotifications</a>\nmethod.</p></li>\n</ul>\n\n\n<h3>Push Notifications with User Sessions</h3>\n\n<p>The following methods require the user to be logged in to subscribe, receive or unsubscribe from\npush notifications:</p>\n\n<ul>\n<li><a href=\"#!/api/PushNotifications-method-subscribe\" rel=\"PushNotifications-method-subscribe\" class=\"docClass\">subscribe</a></li>\n<li><a href=\"#!/api/PushNotifications-method-notify\" rel=\"PushNotifications-method-notify\" class=\"docClass\">notify</a></li>\n<li><a href=\"#!/api/PushNotifications-method-unsubscribe\" rel=\"PushNotifications-method-unsubscribe\" class=\"docClass\">unsubscribe</a></li>\n</ul>\n\n\n<p>To send push notifications, the <code>notify.json</code> method uses the user's ID.</p>\n\n<p>You can also use the <a href=\"#!/api/Users-method-logout\" rel=\"Users-method-logout\" class=\"docClass\">Users.logout</a> method to unsubscribe from all push notifications by\nspecifying the <code>device_id</code> parameter.</p>\n\n<h3>Scheduling Push Notifications</h3>\n\n<p>You can send push notifications to users at specific times, over a span of time; or at daily,\nweekly, or monthly intervals.</p>\n\n<p>For more information, refer to the <a href=\"#!/api/PushSchedules\" rel=\"PushSchedules\" class=\"docClass\">PushSchedules</a> API.</p>\n\n<h3>Location-Based Push Notifications</h3>\n\n<p>You can send push notifications to users based on their location.  To use location-based push\nnotifications, the ArrowDB server needs to know the location of the device.  To update the device's\nlocation, you need to periodically call the <a href=\"#!/api/PushNotifications-method-subscription_update\" rel=\"PushNotifications-method-subscription_update\" class=\"docClass\">subscription_update</a> method and specify\nthe <code>loc</code> parameter to update the device's location.</p>\n\n<p>To send a location-based push notification, use either the <a href=\"#!/api/PushNotifications-method-notify\" rel=\"PushNotifications-method-notify\" class=\"docClass\">notify</a> or\n<a href=\"#!/api/PushNotifications-method-notify_tokens\" rel=\"PushNotifications-method-notify_tokens\" class=\"docClass\">notify_tokens</a> method and specify a location query with the <code>where</code>\nparameter.  For example, the following cURL command, sends a push notification to any device within\n10 miles of Mountain View, CA, USA:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode 'payload=Come visit our brand new Mountain View location!' \"https://api.cloud.appcelerator.com/v1/push_notification/notify.json?key=&lt;API_KEY&gt;\" --data-urlencode 'where={\"loc\":{\"$geoWithin\":{\"$centerSphere\":[[-122.0507049560547,37.38685989379883] , 0.00252589 ]}}}'\n</code></pre>\n\n<p>You can use the <a href=\"#!/api/GeoFences\" rel=\"GeoFences\" class=\"docClass\">GeoFences</a> API to have the device periodically check the ArrowDB server for\ndata based on location instead of having the server push it to the device.</p>\n\n<h3>Querying Push Notification Subscriptions</h3>\n\n<p>Regular (non-admin) application users can use the <a href=\"#!/api/PushNotifications-method-query\" rel=\"PushNotifications-method-query\" class=\"docClass\">query</a> method to query their own\npush notification subscriptions. For application admins, the same method queries all subscriptions for all users,\nby default. An app admin can also query an arbitrary user's subscriptions by specifying the user's ID\nas the value of the <a href=\"#!/api/PushNotifications-method-query\" rel=\"PushNotifications-method-query\" class=\"docClass\">query</a> method's <code>su_id</code> parameter.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-channels_query' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>GET </strong><a href='#!/api/PushNotifications-method-channels_query' class='name expandable'>push_notification/channels/query.json</a></div><div class='description'><div class='short'>Returns a list of push notification channels the user is subscribed to. ...</div><div class='long'><p>Returns a list of push notification channels the user is subscribed to.</p>\n\n<p>For application admins, if the <code>user_id</code> parameter is not specified, returns all channels\nwith subscribed users.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>user_id</span> : String<div class='sub-desc'><p>User to retrieve subscribed channels for.</p>\n\n<p>Only application admins can query subscribed channels of a user.</p>\n</div></li><li><span class='pre'>page</span> : Number<div class='sub-desc'><p>Request page number, default is 1.</p>\n</div></li><li><span class='pre'>per_page</span> : Number<div class='sub-desc'><p>Number of results per page, default is 10.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li><li><span class='pre'>count</span> : Boolean<div class='sub-desc'><p>Set to <code>true</code> to return the total number of push channels in the <code>count</code> field of the\n<code>meta</code> header.  Default is <code>false</code>.</p>\n\n<p>Only valid for applications created with ArrowDB 1.1.8 or greater.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>push_channels</span> : String[]<div class='sub-desc'><p>List of subscribed channels.</p>\n</div></li><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>Total number of push channels.  Returned in the meta header of the response.\nSet the <code>count</code> parameter to <code>true</code> to retrieve the count.</p>\n\n<p>Only valid for applications created with ArrowDB 1.1.8 or greater. Prior to this release,\ncheck the <code>total_results</code> field in the <code>meta</code> header.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Requires Release 3.2.0.</p>\n\n<pre><code>Cloud.PushNotifications.queryChannels({\n    user_id: savedUserId\n}, function (e) {\n    if (e.success) {\n        Ti.API.info(\"channel: \" + e.push_channels.join());\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/channels/query.json?key=&lt;YOUR APP API KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"queryPushChannels\"\n  },\n  \"response\": {\n    \"push_channels\": [\n      \"friend_request\",\n      \"chat\"\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"user_id\": savedUserId\n};\n\n[APSPushNotifications queryChannels:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          NSString *message = [NSString stringWithFormat:@\"Found %lu push_channels\", (unsigned long)((NSArray *) e.response[@\"push_channels\"]).count ];\n          [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\n\ntry {\n    APSPushNotifications.queryChannels(null, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                try {\n                    JSONArray push_channels = e.getResponse().getJSONArray(\"push_channels\");\n                    if (push_channels.length() &lt;= 0) {\n                        Log.i(\"APSPushNotifications\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; push_channels.length(); i++) {\n                            Log.i(\"APSPushNotifications\", push_channels.getJSONObject(i).toString());\n                        }\n                    }\n                } catch (JSONException err) {\n                    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + err.toString());\n                }\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-channels_show' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>GET </strong><a href='#!/api/PushNotifications-method-channels_show' class='name expandable'>push_notification/channels/show.json</a><strong class='signature'>admin-only</strong></div><div class='description'><div class='short'>Returns the number of devices subscribed to the specified channel. ...</div><div class='long'><p>Returns the number of devices subscribed to the specified channel.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Name of the push channel.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>devices</span> : Hash<div class='sub-desc'><p>Number of devices subscribed to the channel.</p>\n\n<ul>\n<li><code>android_counts</code>: number of Android devices subscribed to the channel.</li>\n<li><code>ios_counts</code>: number of iOS devices subscribed to the channel.</li>\n</ul>\n\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Requires Release 3.2.0.</p>\n\n<pre><code>Cloud.PushNotifications.showChannels({\n    name: 'test'\n}, function (e) {\n    if (e.success) {\n        Ti.API.info(\"Android:\" + e.devices.android_counts);\n        Ti.API.info(\"iOS:\" + e.devices.ios_counts);\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode \"name=chat\" \"https://api.cloud.appcelerator.com/v1/push_notification/channels/show.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"showPushChannels\",\n  },\n  \"response\": {\n    \"devices\": {\n      \"ios_counts\": 12,\n      \"android_counts\": 18\n    }\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"name\": @\"test\"\n};\n\n[APSPushNotifications showChannels:data withBlock:^(APSResponse *e) {\n    if (e.success) {\n        NSDictionary *devices = e.response[@\"devices\"];\n        NSString *message = [NSString stringWithFormat:@\"iOS: %@ Android: %@\", devices[@\"ios_counts\"], devices[@\"android_counts\"]];\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"name\", \"chat\");\n\ntry {\n    APSPushNotifications.showChannels(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                try {\n                    JSONArray devices = e.getResponse().getJSONArray(\"devices\");\n                    if (devices.length() &lt;= 0) {\n                        Log.i(\"APSPushNotifications\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; devices.length(); i++) {\n                            Log.i(\"APSPushNotifications\", devices.getJSONObject(i).toString());\n                        }\n                    }\n                } catch (JSONException err) {\n                    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + err.toString());\n                }\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-count' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>GET </strong><a href='#!/api/PushNotifications-method-count' class='name not-expandable'>push_notification/count.json</a></div><div class='description'><div class='short'><p>Retrieves the total number of devices subscribed to push notifications.</p>\n</div><div class='long'><p>Retrieves the total number of devices subscribed to push notifications.</p>\n<h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>Total number of devices subscribed to push notifications. Returned in the <code>meta</code> header.</p>\n</div></li><li><span class='pre'>push_notification_subscriptions</span> : Hash<div class='sub-desc'><p>Only returned if <code>count</code> is greater than zero.</p>\n\n<p>A dictionary with two fields:</p>\n\n<ul>\n<li><code>android</code> (Number): Total number of Android devices subscribed to push notifications.</li>\n<li><code>ios</code> (Number): Total number of iOS devices subscribed to push notifications.</li>\n</ul>\n\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Example request to retrieve the number of devices subscribed to push notifications.</p>\n\n<pre><code>Cloud.sendRequest({\n    url : \"push_notification/count.json\",\n    method : \"GET\"\n}, function(e) {// The callback called when the request completes\n    Ti.API.info(JSON.stringify(e));\n    if (e.success) {\n        alert(\"Subscribed iOS Devices: \" + e.ios +\n            \"\\nSubscribed Android Devices: \" + e.android);\n    } else {\n        alert('Error:\\n' + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/count.json?key=&lt;YOUR_APP_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"status\": \"ok\",\n    \"method_name\": \"push_notificationCount\"\n    \"count\": 10,\n  },\n  \"response\": {\n    \"push_notification_subscriptions\": {\n      \"android\": 4,\n      \"ios\": 6\n    }\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example request to retrieve the number of devices subscribed to push notifications.</p>\n\n<pre><code>[[APSCloud sharedInstance] sendRequest:@\"push_notification/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){\n    if (e.success) {\n        NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]];\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example request to retrieve the number of devices subscribed to push notifications.</p>\n\n<pre><code>APSCloud.getInstance().sendRequest(\"push_notification/count.json\", \"GET\", null, new APSResponseHandler() {\n    public void onResponse(final APSResponse e) {\n        if (e.getSuccess()) {\n            try {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\")))\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } catch (Exception error) {\n                Log.e(\"APSCloud\", \"Exception throw: \" + error.toString());\n            }\n        }\n        else {\n            Log.e(\"APSCloud\", e.getErrorMessage());\n        }\n    }\n\n    @Override\n    public void onException(APSCloudException e) {\n        Log.e(\"APSCloud\", \"Exception throw: \" + e.toString());\n    }\n});\n</code></pre>\n</div></div></div></div></div><div id='method-notify' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>POST </strong><a href='#!/api/PushNotifications-method-notify' class='name expandable'>push_notification/notify.json</a></div><div class='description'><div class='short'>Sends push notifications to one or more users who are subscribed to a channel. ...</div><div class='long'><p>Sends push notifications to one or more users who are subscribed to a channel.</p>\n\n<p>Specify either <code>friends</code>, <code>to_ids</code> or <code>where</code>.\nOne of these parameters must be used. These parameters cannot be used simultaneously.</p>\n\n<p>Application admins can set the <code>to_ids</code> parameter to <code>everyone</code> to send to all devices\nsubscribed to the identified channel.</p>\n\n<p>The REST version of <code>notify</code> includes the push notification ID in its response.\nSee the REST example below.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>channel</span> : String/String[] <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Name of the channel. For multiple channels, either comma-separate the list of channels\nor use an array of strings.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>friends</span> : Any<div class='sub-desc'><p>If this parameter is specified (regardless of the parameter's value),\npush notifications are sent to any of the user's <a href=\"#!/api/Friends\" rel=\"Friends\" class=\"docClass\">Friends</a> who are\nsubscribed to the identified channel.</p>\n</div></li><li><span class='pre'>to_ids</span> : String<div class='sub-desc'><p>Comma-separated list of user IDs to send the notification to users who are subscribed\nto the specified channel. Up to 1000 users can be specified.</p>\n\n<p>You <strong>cannot</strong> use this parameter when using a location query with the <code>where</code> parameter.</p>\n\n<p>Application admins can set this parameter to <code>everyone</code> to send to all devices\nsubscribed to the channel.</p>\n\n<p>If you are using the web interface, you do not need to specify this parameter.</p>\n</div></li><li><span class='pre'>payload</span> : String/<a href=\"#!/api/PushPayload\" rel=\"PushPayload\" class=\"docClass\">PushPayload</a> <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Payload to send with the push notification.</p>\n\n<p>For a string, it will be sent as an alert (notification message).</p>\n</div></li><li><span class='pre'>options</span> : Hash<div class='sub-desc'><p>Additional push options.</p>\n\n<ul>\n<li><em>expire_after_seconds</em> (Number): Expiration time in seconds of when to stop sending the push notification.\nFor example, if the push notification expiration time is for a day and the user's device\nis off for over a day, the user does not receive the push notification since it has expired.</li>\n</ul>\n\n\n<p>For example, to specify a one day expiration period, use <code>options={'expire_after_seconds':86400}</code>.</p>\n</div></li><li><span class='pre'>where</span> : Hash<div class='sub-desc'><p>A JSON-encoded object that defines either the user or location query used to select the device\nthat will receive the notification. Up to 1000 users can be returned by the query.</p>\n\n<p>If you are using a location query, you <strong>cannot</strong> use the <code>to_ids</code> parameter.</p>\n\n<p>To specify a user query, set the <code>user</code> field to a custom query, for example, the\nfollowing query searches for all users with the first name of Joe:</p>\n\n<pre><code>where={\"user\": {\"first_name\":\"Joe\"}}\n</code></pre>\n\n<p>To specify a location query, set the <code>loc</code> field to a\n<a href=\"http://docs.mongodb.org/manual/reference/operator/query-geospatial/\">MongoDB Geospatial Query</a>.\nThe following query searches for all users within 2 km of Oakland, CA, USA:</p>\n\n<pre><code>where={\"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 }}}\n</code></pre>\n\n<p>For details about using the <code>where</code> parameter, see the <a href=\"#!/guide/search_query\">Search and Query guide</a>.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>push_notification</span> : Hash<div class='sub-desc'><p>Information about the requested push notification:</p>\n\n<ul>\n<li><code>id</code>: The ID of the requested push notification.</li>\n<li><code>payload</code>: The notification payload.</li>\n<li><code>channel</code>: The notification channel.</li>\n</ul>\n\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example sends a push notification to a channel and checks the response.</p>\n\n<pre><code>Cloud.PushNotifications.notify({\n    channel: 'friend_request',\n    to_ids: '5354525d5714f565d3001c1e',\n    payload: 'Welcome to push notifications'\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request. The JSON response object includes the ID of the push notification.</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -F \"channel=friend_request\" -F \"to_ids=5354525d5714f565d3001c1e\" -F \"payload=test\" https://api.cloud.appcelerator.com/v1/push_notification/notify.json?key=&lt;APP_KEY&gt;&amp;pretty_json=true\n\nExample JSON response:\n\n    {\n      \"meta\": {\n        \"code\": 200,\n        \"status\": \"ok\",\n                    \"method_name\": \"Notify\"\n      },\n      \"response\": {\n        \"push_notification\": {\n          \"id\": \"53690d3fe10fa4582a00e887\",\n          \"payload\": \"test\",\n          \"channel\": \"friend_request\"\n        }\n      }\n    }\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"channel\": @\"friend_request\",\n    @\"to_id\": @\"5354525d5714f565d3001c1e\",\n    @\"payload\": @\"Welcome to push notifications\"\n};\n\n[APSPushNotifications notify:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"to_ids\", \"123456,34567\");\ndata.put(\"payload\", \"Push Notification Test\");\n\ntry {\n    APSPushNotifications.notify(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Notified!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-notify_tokens' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>POST </strong><a href='#!/api/PushNotifications-method-notify_tokens' class='name expandable'>push_notification/notify_tokens.json</a></div><div class='description'><div class='short'>Sends push notifications to one or more users who are subscribed to a channel. ...</div><div class='long'><p>Sends push notifications to one or more users who are subscribed to a channel.</p>\n\n<p>Application admins can set the <code>to_tokens</code> parameter to <code>everyone</code> to send to all devices\nsubscribed to the identified channel.</p>\n\n<p>If you use the <code>to_tokens</code> parameter, you <strong>cannot</strong> specify a location query using the <code>where</code>\nparameter in the same API call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>channel</span> : String/String[] <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Name of the channel. For multiple channels, either comma-separate the list of channels\nor use an array of strings.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>to_tokens</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Comma-separated list of device tokens. Sends push notification to the specified\ntokens who are subscribed to the specified channel.</p>\n\n<p>You <strong>cannot</strong> use this parameter with a location query using the <code>where</code> parameter.</p>\n\n<p>Application admins can set this parameter to <code>everyone</code> to send to all devices\nsubscribed to the channel.</p>\n\n<p>If you are using the web interface, you do not need to specify this parameter.</p>\n</div></li><li><span class='pre'>payload</span> : String/<a href=\"#!/api/PushPayload\" rel=\"PushPayload\" class=\"docClass\">PushPayload</a> <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Payload to send with the push notification.</p>\n\n<p>For a string, it will be sent as an alert (message notification).</p>\n</div></li><li><span class='pre'>options</span> : Hash<div class='sub-desc'><p>Additional push options.</p>\n\n<ul>\n<li><em>expire_after_seconds</em> (Number): Expiration time in seconds of when to stop sending the push notification.\nFor example, if the push notification expiration time is for a day and the user's device\nis off for over a day, the user does not receive the push notification since it has expired.</li>\n</ul>\n\n\n<p>For example, to specify a one day expiration period, use <code>options={'expire_after_seconds':86400}</code>.</p>\n</div></li><li><span class='pre'>where</span> : Hash<div class='sub-desc'><p>A JSON-encoded object that defines either the user or location query used to select the device\nthat will receive the notification. Up to 1000 users can be returned by the query.</p>\n\n<p>If you are using the <code>to_tokens</code> parameter, you <strong>cannot</strong> specify a location query.</p>\n\n<p>To specify a user query, set the <code>user</code> field to a custom query, for example, the\nfollowing query searches for all users with the first name of Joe:</p>\n\n<pre><code>where={\"user\": {\"first_name\":\"Joe\"}}\n</code></pre>\n\n<p>To specify a location query, set the <code>loc</code> field to a\n<a href=\"http://docs.mongodb.org/manual/reference/operator/query-geospatial/\">MongoDB Geospatial Query</a>.\nThe following query searches for all users within 2 km of Oakland, CA, USA:</p>\n\n<pre><code>where={\"loc\": { \"$nearSphere\" : { \"$geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [-122.2708,37.8044] } , \"$maxDistance\" : 2000 }}}\n</code></pre>\n\n<p>For details about using the <code>where</code> parameter,\nsee the <a href=\"#!/guide/search_query\">Search and Query guide</a>.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example sends a push notification to a channel and checks the response.\nRequires Titanium SDK 3.1.2 and later.</p>\n\n<pre><code>Cloud.PushNotifications.notifyTokens({\n    channel: 'friend_request',\n    to_tokens: TOKEN_LIST,\n    payload: 'Welcome to push notifications'\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>curl -X POST -F \"channel=&lt;channel&gt;\" -F \"to_tokens=&lt;token list&gt;\" -F \"payload=&lt;payload&gt;\" \"https://api.cloud.appcelerator.com/v1/push_notification/notify_tokens.json?key=&lt;key&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"NotifyTokens\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"channel\": @\"friend_request\",\n    @\"to_tokens\": TOKEN_LIST,\n    @\"payload\": @\"Welcome to push notifications\"\n};\n\n[APSPushNotifications notifyTokens:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"to_tokens\", TOKEN_LIST);\ndata.put(\"payload\", \"Push Notification Test\");\n\ntry {\n    APSPushNotifications.notifyTokens(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Notified!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>GET </strong><a href='#!/api/PushNotifications-method-query' class='name expandable'>push_notification/query.json</a></div><div class='description'><div class='short'>Note: this API is only available for applications created with ArrowDB 1.1.7 or greater. ...</div><div class='long'><p><strong>Note:</strong> this API is only available for applications created with ArrowDB 1.1.7 or greater.</p>\n\n<p>Custom query of push notification subscriptions with pagination. For regular (non-admin) application\nusers, this method returns the currently logged-in user's list of push notification subscriptions.\nFor app admins, the method returns a list of subscriptions for all users, or just those\nfor the user specified by as the method's <code>su_id</code> parameter.</p>\n\n<p>You can paginate query results using <code>skip</code> and <code>limit</code> parameters, or <code>page</code> and <code>per_page</code>,\nbut not both in the same query.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>su_id</span> : String <strong class=\"signature\">admin-only</strong><div class='sub-desc'><p>User ID of the user who has subscribed devices for push notification.\nYou must be an application admin to query another user's subscriptions.</p>\n\n<p>If this parameter is not included, a list of subscriptions for all users is returned.</p>\n</div></li><li><span class='pre'>channel</span> : String<div class='sub-desc'><p>Name of the push notification channel.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>device_token</span> : String<div class='sub-desc'><p>Apple or Android Device Token.</p>\n</div></li><li><span class='pre'>type</span> : String<div class='sub-desc'><p>Selects the push type.</p>\n\n<p>Set to <code>android</code> for Android devices usingGoogle Cloud Messaging\nor <code>ios</code> for iOS devices using Apple Push Notification Service.</p>\n</div></li><li><span class='pre'>page</span> : Number<div class='sub-desc'><p>Request page number, default is 1.</p>\n</div></li><li><span class='pre'>per_page</span> : Number<div class='sub-desc'><p>Number of results per page, default is 10.</p>\n</div></li><li><span class='pre'>limit</span> : Number<div class='sub-desc'><p>Instead of using <code>page</code> and <code>per_page</code> for pagination, you can use <code>limit</code> and\n<code>skip</code> to do your own pagination. <code>limit</code> is the maximum number of records to <code>skip</code>.\nThe specified value must be greater than 0 and no greater than 1000, or an HTTP 400\n(Bad Request) error will be returned.</p>\n</div></li><li><span class='pre'>skip</span> : Number<div class='sub-desc'><p>Number of records to skip. Must be used together with <code>limit</code>. The specified value must not\nbe less than 0 or an HTTP 400 error will be returned.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>subscriptions</span> : Hash[]<div class='sub-desc'><p>Array of subscription objects, where each subscription object has the\nfollowing properties:</p>\n\n<ul>\n<li><code>id</code> : <code>String</code>. Generated ID associated with the subscription.</li>\n<li><code>channel</code> : <code>Array of Strings</code>. List of subscribed channels.</li>\n<li><code>device_token</code> : <code>String</code>. iOS or Android device token associated with\nthis subscription.</li>\n<li><code>type</code> : <code>String</code>. Device type. Either \"ios\" or \"android\".</li>\n</ul>\n\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Requires Release 3.2.0.</p>\n\n<pre><code>Cloud.PushNotifications.query({\n    user_id: userId\n}, function (e) {\n    if (e.success) {\n        e.subscriptions.forEach(function(subscription){\n            Ti.API.info(subscription.channel.join());\n        });\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/push_notification/query.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true&amp;user_id=4f5905b5d2951316a9000020\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"querySubscriptions\",\n    \"page\": 1,\n    \"per_page\": 10,\n    \"total_pages\": 1,\n    \"total_results\": 2\n  },\n  \"response\": {\n    \"subscriptions\": [\n      {\n        \"id\": \"4f6171dcd29513027200000c\",\n        \"channel\": [\"friend_request\", \"alert\"],\n        \"device_token\": \"f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358dd\",\n        \"type\": \"ios\"\n      },\n      {\n        \"id\": \"4f6171e7d29513027200000e\",\n        \"channel\": [\"friend_request\", \"vip\"],\n        \"device_token\": \"f7702d77b34ed94869k66oe\",\n        \"type\": \"android\"\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"user_id\": userId\n};\n\n[APSPushNotifications query:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          NSString *message = [NSString stringWithFormat:@\"Found %lu subscriptions\", (unsigned long)((NSArray *) e.response[@\"subscriptions\"]).count ];\n          [[[UIAlertView alloc] initWithTitle:@\"Success\" message:message delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"user_id\", \"4f5905b5d2951316a9000020\");\n\ntry {\n    APSPushNotifications.query(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                try {\n                    JSONArray subscriptions = e.getResponse().getJSONArray(\"subscriptions\");\n                    if (subscriptions.length() &lt;= 0) {\n                        Log.i(\"APSPushNotifications\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; subscriptions.length(); i++) {\n                            Log.i(\"APSPushNotifications\", subscriptions.getJSONObject(i).toString());\n                        }\n                    }\n                } catch (JSONException err) {\n                    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + err.toString());\n                }\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-reset_badge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>PUT </strong><a href='#!/api/PushNotifications-method-reset_badge' class='name expandable'>push_notification/reset_badge.json</a></div><div class='description'><div class='short'>Sets the internally stored value of the badge to zero of a specific device. ...</div><div class='long'><p>Sets the internally stored value of the badge to zero of a specific device.</p>\n\n<p>This method only updates the internally stored value of the badge.  To update the badge value\non the iOS icon or Android notification center, send a push notification with the <code>badge</code> field defined.</p>\n\n<p>If you are an application admin, you may omit the device token.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Device token. If you are an application admin, you may omit the device token.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Requires Titanium SDK 3.2.1 and later.</p>\n\n<pre><code>Cloud.PushNotifications.resetBadge({\n    device_token: device_token.value\n}, function (e) {\n    if (e.success) {\n        Ti.API.info('Badge Reset!');\n    }\n    else {\n        Ti.API.error(e);\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X PUT -F \"device_token=&lt;device_token&gt;\" \"https://api.cloud.appcelerator.com/v1/push_notification/reset_badge.json?key=&lt;API_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"resetBadge\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"device_token\": deviceToken\n};\n\n[APSPushNotifications resetBadge:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"device_token\", \"&lt;device_token&gt;\");\n\ntry {\n    APSPushNotifications.resetBadge(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Badge Reset!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-set_badge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>PUT </strong><a href='#!/api/PushNotifications-method-set_badge' class='name expandable'>push_notification/set_badge.json</a></div><div class='description'><div class='short'>Sets the value of the internally stored value of the badge. ...</div><div class='long'><p>Sets the value of the internally stored value of the badge.</p>\n\n<p>This method only updates the internally stored value of the badge.  To update the badge value\non the iOS icon or Android notification center, send a push notification with the <code>badge</code> field defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>device_token</span> : String<div class='sub-desc'><p>Device token. Required if you are not an application admin.</p>\n</div></li><li><span class='pre'>badge_number</span> : String<div class='sub-desc'><p>Number to set as the badge on the application's icon.\nSpecify postive and negative values with the <code>+</code> and <code>-</code>\nsymbols to increment or decrement the current badge number, respectively.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Requires Titanium SDK 3.2.1 and later.</p>\n\n<pre><code>Cloud.PushNotifications.setBadge({\n    device_token: device_token.value,\n    badge_number: badge_number.value\n}, function (e) {\n    if (e.success) {\n        Ti.API.info('Badge Set!');\n    }\n    else {\n        Ti.API.error(e);\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X PUT -F \"badge_number=12\" \"https://api.cloud.appcelerator.com/v1/push_notification/set_badge.json?key=&lt;API_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"setBadge\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"device_token\": deviceToken,\n    @\"badge_number\": @5\n};\n\n[APSPushNotifications setBadge:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"badge_number\", 12);\n\ntry {\n    APSPushNotifications.setBadge(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Badge Set!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n      Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-subscribe' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>POST </strong><a href='#!/api/PushNotifications-method-subscribe' class='name expandable'>push_notification/subscribe.json</a></div><div class='description'><div class='short'>Subscribes a mobile device to a push notifications channel. ...</div><div class='long'><p>Subscribes a mobile device to a push notifications channel. Developers can\ncreate different channels for different types of push notifications. For\ninstance, a channel for friend request, a channel for chat, etc. Push\nnotifications currently only work on iOS and Andriod.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>channel</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Push notification channel to subscribe to. For multiple channels, comma separate the\nlist of channel names.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Apple or Android Device Token.</p>\n</div></li><li><span class='pre'>type</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Selects the push type.</p>\n\n<p>Set to <code>android</code> for Android devices using Google Cloud Messaging\nor <code>ios</code> for iOS devices using Apple Push Notification Service.</p>\n</div></li><li><span class='pre'>su_id</span> : String<div class='sub-desc'><p>User ID to subscribe on behalf of.</p>\n\n<p>Only application admins can subscribe to push notifications on behalf of other\nusers.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example subscribes to a push notification channel and checks the response.</p>\n\n<pre><code>Cloud.PushNotifications.subscribe({\n    channel: 'friend_request',\n    device_token: myPushDeviceToken,\n    type: 'android'\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -F \"type=ios\" -F \"channel=friend_request\" -F \"device_token=f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db\" https://api.cloud.appcelerator.com/v1/push_notification/subscribe.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"SubscribeNotification\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"channel\": @\"friend_request\",\n    @\"device_token\": deviceToken,\n    @\"type\": @\"ios\",\n};\n\n[APSPushNotifications subscribe:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"type\", \"android\");\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"device_token:\", \"4e7a297ccc173bec93a2b81\");\n\ntry {\n    APSPushNotifications.subscribe(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Subscribed!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-subscribe_token' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>POST </strong><a href='#!/api/PushNotifications-method-subscribe_token' class='name expandable'>push_notification/subscribe_token.json</a></div><div class='description'><div class='short'>Subscribes a mobile device to a push notifications channel. ...</div><div class='long'><p>Subscribes a mobile device to a push notifications channel.</p>\n\n<p>Developers can create different channels for different types of push notifications, such as\na friend request, chat, etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Android or iOS device token.</p>\n\n<p>For Android, the length is dynamic and is less than 4096 characters.</p>\n\n<p>For iOS, the length is 64 characters.</p>\n</div></li><li><span class='pre'>channel</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Name of the channel. For multiple channels, comma separate the list of channel names.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>type</span> : String<div class='sub-desc'><p>Selects the push type.</p>\n\n<p>Set to <code>android</code> for Android devices using Google Cloud Messaging\nor <code>ios</code> for iOS devices using Apple Push Notification Service.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example subscribes to a push notification channel and checks the response.\nRequires Titanium SDK 3.1.2 and later.</p>\n\n<pre><code>Cloud.PushNotifications.subscribeToken({\n    device_token: DEVICE_TOKEN,\n    channel: 'friend_request',\n    type: 'ios'\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>curl -i -X POST -F \"type=ios\" -F \"device_token=&lt;token&gt;\" -F \"channel=friend_request\" \"http://api.cloud.appcelerator.com/v1/push_notification/subscribe_token.json?key=&lt;app key&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"SubscribeNotificationByToken\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"device_token\": deviceToken,\n    @\"channel\": @\"friend_request\",\n    @\"type\": @\"ios\"\n};\n\n[APSPushNotifications subscribeToken:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"type\", \"android\");\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"device_token\", \"4e7a297ccc173bec93a2b81\");\n\ntry {\n    APSPushNotifications.subscribeToken(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Subscribed!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-subscription_update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>PUT </strong><a href='#!/api/PushNotifications-method-subscription_update' class='name expandable'>push_notification/subscription/update.json</a></div><div class='description'><div class='short'>Updates the device's push channel subscription. ...</div><div class='long'><p>Updates the device's push channel subscription.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Apple or Android Device Token.</p>\n</div></li><li><span class='pre'>su_id</span> : String <strong class=\"signature\">admin-only</strong><div class='sub-desc'><p>User ID to update the subscription on behalf of. You must be logged in as an application administrator\nto update another user's notification subscription.</p>\n</div></li><li><span class='pre'>loc</span> : Number[]<div class='sub-desc'><p>The device's current location specified as an array with longitude as the first element, and latitude\nas the second element (<code>[longitude,latitude]</code>).</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>The following example gets the device's current geographic location and updates the user's\nsubscription with the coordinates.</p>\n\n<pre><code>Titanium.Geolocation.getCurrentPosition(function(e) {\n    if (e.error) {\n        Ti.API.error('Error: ' + e.error);\n    } else {\n        var latitude = e.coords.latitude;\n        var longitude = e.coords.longitude;\n        Cloud.PushNotifications.updateSubscription({\n            device_token : pushDeviceToken,\n            loc : [longitude, latitude]\n        }, function(e) {\n            if (e.success) {\n                alert('Subscription Updated.');\n            } else {\n                alert(e);\n            }\n        });\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>The following example updates the device's location to Mountain View, CA, USA:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X PUT -F \"device_token=&lt;DEVICE_TOKEN&gt;\" -F \"loc=[-122.0507049560547,37.38685989379883]\" \"http://api.cloud.appcelerator.com/v1/push_notification/subscription/update.json?key=&lt;API_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example cURL response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"UpdateSubscription\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"device_token\": deviceToken,\n    @\"loc\": @[longitude, latitude]\n};\n\n[APSPushNotifications updateSubscription:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"loc\", [-122.23,37.12]);\ndata.put(\"device_token\", \"&lt;DEVICE_TOKEN&gt;\");\n\ntry {\n    APSPushNotifications.updateSubscription(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Subscription Updated!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-unsubscribe' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>DELETE </strong><a href='#!/api/PushNotifications-method-unsubscribe' class='name expandable'>push_notification/unsubscribe.json</a></div><div class='description'><div class='short'>Unsubscribes one of the current user's devices from a push notification channel. ...</div><div class='long'><p>Unsubscribes one of the current user's devices from a push notification channel. If channel name is not\nprovided, unsubscribe the device from all channels.</p>\n\n<p>When a user logs out from a device, you can cancel all subscriptions for the\ndevice by passing the device's token to the <a href=\"#!/api/Users-method-logout\" rel=\"Users-method-logout\" class=\"docClass\">Users.logout</a> method.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>channel</span> : String<div class='sub-desc'><p>Name of the push notification channel. For multiple channels, comma separate the list of\nchannel names.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contains a comma (',').</p>\n</div></li><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Apple or Android Device Token.</p>\n</div></li><li><span class='pre'>user_id</span> : String<div class='sub-desc'><p>User ID to unsubscribe from push notifications.</p>\n\n<p>Only application admins can unsubscribe another user from push notifications.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example unsubscribes from a push notification channel and checks the response.</p>\n\n<pre><code>Cloud.PushNotifications.unsubscribe({\n    channel: 'friend_request',\n    device_token: myPushDeviceToken\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/push_notification/unsubscribe.json?key=&lt;YOUR API APP KEY&gt;&amp;channel=friend_request&amp;device_token=f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"UnsubscribeNotification\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"channel\": @\"friend_request\",\n    @\"device_token\": deviceToken\n};\n\n[APSPushNotifications unsubscribe:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"device_token\", \"4e7a297ccc173bec93a2b81\");\n\ntry {\n    APSPushNotifications.unsubscribe(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Unsubscribed!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-unsubscribe_token' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PushNotifications'>PushNotifications</span></div><strong class='http-method'>DELETE </strong><a href='#!/api/PushNotifications-method-unsubscribe_token' class='name expandable'>push_notification/unsubscribe_token.json</a></div><div class='description'><div class='short'>Unsubscribes the specified device from a push notification channel. ...</div><div class='long'><p>Unsubscribes the specified device from a push notification channel.\nIf <code>channel</code> is not defined, unsubscribes the device from all channels.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>channel</span> : String<div class='sub-desc'><p>Name of the push notification channel. For multiple channels, comma separate the list of\nchannel names.</p>\n\n<p>The name of the push channel cannot start with a hash symbol ('#') or contain a comma (',').</p>\n</div></li><li><span class='pre'>device_token</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Android or iOS device token.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example unsubscribes from a push notification channel and checks the response.\nRequires Titanium SDK 3.1.2 and later.</p>\n\n<pre><code>Cloud.PushNotifications.unsubscribeToken({\n    channel: 'friend_request',\n    device_token: myPushDeviceToken\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>curl -X DELETE -F \"channel=&lt;channel&gt;\" -F \"device_token=&lt;token&gt;\" \"https://api.cloud.appcelerator.com/v1/push_notification/unsubscribe_token.json?key=&lt;key&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"UnsubscribeNotificationByToken\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS APS SDK call:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n    @\"channel\": @\"friend_request\",\n    @\"device_token\": deviceToken\n};\n\n[APSPushNotifications unsubscribeToken:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"channel\", \"friend_request\");\ndata.put(\"device_token\", \"4e7a297ccc173bec93a2b81\");\n\ntry {\n    APSPushNotifications.unsubscribeToken(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n\n            if (e.getSuccess()) {\n                Log.i(\"APSPushNotifications\", \"Unsubscribed!\");\n            } else {\n                Log.e(\"APSPushNotifications\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPushNotifications\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPushNotifications\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div></div></div></div></div>"});