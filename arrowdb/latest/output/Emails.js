Ext.data.JsonP['Emails']({"tagname":"class","name":"Emails","alternateClassNames":[],"mixins":[],"meta":{},"aliases":{},"files":[{"filename":"send.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/Emails/send.yml"},{"filename":"Emails.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/Emails/Emails.yml"},{"filename":"count.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/Emails/count.yml"}],"members":{"cfg":[],"property":[],"method":[{"name":"email_templates/count.json","tagname":"method","owner":"Emails","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-count"},{"name":"custom_mailer/email_from_template.json","tagname":"method","owner":"Emails","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-email_from_template"}],"event":[],"css_var":[],"css_mixin":[]},"extends":null,"singleton":null,"private":null,"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='sidebar'></div><div class='hierarchy'></div><div class='doc-contents'><p>The <a href=\"#!/api/Emails-method-email_from_template\" rel=\"Emails-method-email_from_template\" class=\"docClass\">email_from_template</a> method lets you send customized emails to your users. You\ncan send plain text, HTML, or multi-part emails.</p>\n\n<p>Before you can use this method, you must first do the following:</p>\n\n<ul>\n<li>Configure your <a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Configuring_Cloud_Services-section-39683049_ConfiguringCloudServices-Email\">Email settings</a>\nin <a href=\"https://dashboard.appcelerator.com\">Dashboard</a>, or the Settings tab in <a href=\"https://my.appcelerator.com/apps\">My Apps</a>.</li>\n<li>Create at least one email template, which may contain a plain-text body, an HTML-formatted body, or both. See\n<a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Email_Templates\">Managing Email Templates</a>\nfor details on creating an email template.</li>\n</ul>\n\n\n<p>When you call <a href=\"#!/api/Emails-method-email_from_template\" rel=\"Emails-method-email_from_template\" class=\"docClass\">email_from_template</a>, you specify the name of the template,\nto use, the email recipient(s), and optionally the content type to use when\nsending the email (plain, HTML, or multi-part).</p>\n\n<p><strong> Using placeholder fields</strong></p>\n\n<p>The template's subject and body can contain placeholder fields delineated by double curly brackets\n(<code>{{}}</code>). You include a parameter for each placeholder field in the method call specifying\nthe value to insert. For example, if your email template's subject field contains <strong>Hi <code>{{first_name}}</code>!</strong>,\nyou would include a parameter named <code>first_name</code>, as shown below:</p>\n\n<pre><code>curl -F \"recipients=joe@company.com\" -F \"template=welcome\" -F \"first_name=Joe\" https://api.cloud.appcelerator.com/v1/custom_mailer/email_from_template.json?key=&lt;YOUR APP APP KEY&gt;\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-count' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Emails'>Emails</span></div><strong class='http-method'>GET </strong><a href='#!/api/Emails-method-count' class='name not-expandable'>email_templates/count.json</a></div><div class='description'><div class='short'><p>Retrieves the total number of email templates.</p>\n</div><div class='long'><p>Retrieves the total number of email templates.</p>\n<h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>Total number of email templates. Returned in the <code>meta</code> header.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Example request to retrieve the total number of email templates.</p>\n\n<pre><code>Cloud.sendRequest({\n    url : \"email_templates/count.json\",\n    method : \"GET\"\n}, function(e) {\n    if (e.success) {\n        alert(e.meta.count);\n    } else {\n        alert('Error:\\n' + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/email_templates/count.json?key=&lt;YOUR_APP_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"status\": \"ok\",\n    \"method_name\": \"email_templatesCount\",\n    \"count\": 1\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example request to retrieve the total number of Email objects.</p>\n\n<pre><code>[[APSCloud sharedInstance] sendRequest:@\"emails/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){\n    if (e.success) {\n        NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]];\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example request to retrieve the total number of Email objects.</p>\n\n<pre><code>APSCloud.getInstance().sendRequest(\"emails/count.json\", \"GET\", null, new APSResponseHandler() {\n    public void onResponse(final APSResponse e) {\n        if (e.getSuccess()) {\n            try {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\")))\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } catch (Exception error) {\n                Log.e(\"APSCloud\", \"Exception throw: \" + error.toString());\n            }\n        }\n        else {\n            Log.e(\"APSCloud\", e.getErrorMessage());\n        }\n    }\n\n    @Override\n    public void onException(APSCloudException e) {\n        Log.e(\"APSCloud\", \"Exception throw: \" + e.toString());\n    }\n});\n</code></pre>\n</div></div></div></div></div><div id='method-email_from_template' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Emails'>Emails</span></div><strong class='http-method'>POST </strong><a href='#!/api/Emails-method-email_from_template' class='name expandable'>custom_mailer/email_from_template.json</a></div><div class='description'><div class='short'>Sends an email to a list of email addresses you specify. ...</div><div class='long'><p>Sends an email to a list of email addresses you specify.</p>\n\n<p>When sending an email, you specify the name of an email template created in Dashboard\n(see <a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Email_Templates\">Managing Email Templates</a>),\nand one or more email recipients. You can optionally specify the email content type (\nHTML, plain-text, or multipart), as well as values for any placeholder fields\ndefined by the template. The below examples demonstrate these concepts.</p>\n\n<p>An email template's body can contain HTML-formatted or plain-text content\n, or both. When you send an email, you can specify whether the email should be sent\nas HTML, plain text, or multipart using the <code>content_type</code> parameter.\nA multipart email contains both the plain text and HTML versions; which\nversion is displayed is determined by the recipient's email client.</p>\n\n<p>If the <code>content_type</code> parameter is <strong>not</strong> provided in the request, the format\nis automatically chosen based on the following rules:</p>\n\n<ul>\n<li>If the email template contains both HTML and plain-text bodies, it will be sent in a multipart format.</li>\n<li>If the email template contains only an HTML body, it will be sent in an HTML format.</li>\n<li>If the email template contains only a plain-text body. it will be sent in plain-text format.</li>\n</ul>\n\n\n<p>If the <code>content_type</code> parameter is provided in the request, then the following\nmust be true:</p>\n\n<ul>\n<li>If <code>content_type</code> is \"html\", then the email template must define an HTML body.</li>\n<li>If <code>content_type</code> is \"plain\", then the email template must define a plain text body.</li>\n<li>If <code>content_type</code> is \"multipart\", then the email template must define both HTML and plain text body.</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Name of the email template you have created.</p>\n</div></li><li><span class='pre'>recipients</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>Comma separated list of email addresses.</p>\n</div></li><li><span class='pre'>content_type</span> : String<div class='sub-desc'><p>Specifies the email's content-type. The following values are valid:</p>\n\n<ul>\n<li>\"plain\" &mdash; If specified, the email template must define a plain text body.</li>\n<li>\"html\" &mdash; If specified, the email template must define an HTML body.</li>\n<li>\"multipart\" &mdash; If specified, the email template must define both a plain text\n and HTML body.</li>\n</ul>\n\n\n<p>See <a href=\"http://docs.appcelerator.com/platform/latest/#!/guide/Managing_Email_Templates\">Managing Email Templates</a>\nfor details on creating email templates.</p>\n</div></li><li><span class='pre'>from</span> : String<div class='sub-desc'><p>The sender's email address.</p>\n\n<p><strong>Notes</strong>:</p>\n\n<ul>\n<li>If you use Google as your SMTP server, the email will always be sent using the email account\nyou used to configure the SMTP service.</li>\n<li>Some SMTP service provider require the sender's email address to be present.</li>\n</ul>\n\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example sends an Email to \"joe@company.com\" using an email template named\n\"welcome\" that defines a plain-text body with the following content, including\na placeholder field named <code>{{first_name}}</code>:</p>\n\n<pre><code>Welcome {{first_name}},\n\nThanks for signing up!\n\nThe Management              \n</code></pre>\n\n<p>In addition to the recipient and email template, the <code>Cloud.Emails.send()</code> method\nalso specifies a value for the {{first_name}} placeholder:</p>\n\n<pre><code>Cloud.Emails.send({\n    template: 'welcome',\n    recipients: 'joe@company.com',\n    first_name: \"Joe\"\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>This example sends an Email to \"joe@company.com\" using an email template named\n\"welcome\" that defines a plain-text body with the following content, including\na placeholder field named <code>{{first_name}}</code>:</p>\n\n<pre><code>Welcome {{first_name}},\n\nThanks for signing up!\n\nThe Management            \n</code></pre>\n\n<p>Below is an example cURL request that specifies the email template to use, recipient, and value to\ninsert in the {{first_name}} placeholder field.</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -F \"first_name=Joe\" \"recipients=joe@company.com\" -F \"template=welcome\" https://api.cloud.appcelerator.com/v1/custom_mailer/email_from_template.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"emailFromTemplate\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>This example sends an Email to \"joe@company.com\" using an email template named\n\"welcome\" that defines a plain-text body with the following content, including\na placeholder field named <code>{{first_name}}</code>:</p>\n\n<pre><code>Welcome {{first_name}},\n\nThanks for signing up!\n\nThe Management\n</code></pre>\n\n<p>Example iOS APS SDK call that specifies the email template to use, recipient, and value to\ninsert in the {{first_name}} placeholder field:</p>\n\n<pre><code>// Create dictionary of parameters to be passed with the request\nNSDictionary *data = @{\n      @\"template\": @\"welcome\",\n      @\"recipients\": @\"joe@company.com\",\n      @\"first_name\": @\"Joe\"\n};\n\n[APSEmails send:data withBlock:^(APSResponse *e) {\n      if (e.success) {\n          [[[UIAlertView alloc] initWithTitle:@\"Great\" message:@\"Success!\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      } else {\n          [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n      }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>This example sends an Email to \"joe@company.com\" using an email template named\n\"welcome\" that defines a plain-text body with the following content, including\na placeholder field named <code>{{first_name}}</code>:</p>\n\n<pre><code>Welcome {{first_name}},\n\nThanks for signing up!\n\nThe Management\n</code></pre>\n\n<p>Example Android APS SDK call that specifies the email template to use, recipient, and value to\ninsert in the {{first_name}} placeholder field:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"recipients\", \"joe@company.com\");\ndata.put(\"template\", \"welcome\");\ndata.put(\"first_name\", \"Joe\");\n\ntry {\n    APSEmails.send(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Alert\").setMessage(\"Sent!\")\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } else {\n                Log.e(\"APSEmail\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSEmails\", \"Exception thrown: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSEmails\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div></div></div></div></div>"});