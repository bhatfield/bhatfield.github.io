Ext.data.JsonP['PhotoCollections']({"tagname":"class","name":"PhotoCollections","alternateClassNames":[],"mixins":[],"meta":{},"aliases":{},"files":[{"filename":"photos.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/photos.yml"},{"filename":"PhotoCollections.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/PhotoCollections.yml"},{"filename":"batch_delete.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/batch_delete.yml"},{"filename":"show.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/show.yml"},{"filename":"count.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/count.yml"},{"filename":"create.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/create.yml"},{"filename":"update.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/update.yml"},{"filename":"subcollections.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/subcollections.yml"},{"filename":"search.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/search.yml"},{"filename":"delete.yml","href":"/var/lib/jenkins/jobs/appc-docs/workspace/cloud_docs/apidoc/PhotoCollections/delete.yml"}],"members":{"cfg":[],"property":[{"name":"counts","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-counts"},{"name":"cover_photo","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-cover_photo"},{"name":"created_at","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-created_at"},{"name":"id","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-id"},{"name":"name","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-name"},{"name":"parent_collection","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-parent_collection"},{"name":"updated_at","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-updated_at"},{"name":"user","tagname":"property","owner":"PhotoCollections","meta":{"[:hide]":false},"id":"property-user"}],"method":[{"name":"collections/batch_delete.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":true,"adminRequired":true},"id":"method-batch_delete"},{"name":"collections/count.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-count"},{"name":"collections/create.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-create"},{"name":"collections/delete.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-delete"},{"name":"collections/search.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-search"},{"name":"collections/show.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-show"},{"name":"collections/show/photos.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-show_photos"},{"name":"collections/show/subcollections.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":false,"adminRequired":false},"id":"method-show_subcollections"},{"name":"collections/update.json","tagname":"method","owner":"PhotoCollections","meta":{"hide":false,"loginRequired":true,"adminRequired":false},"id":"method-update"}],"event":[],"css_var":[],"css_mixin":[]},"extends":null,"singleton":null,"private":null,"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='sidebar'></div><div class='hierarchy'></div><div class='doc-contents'><p>The PhotoCollections object represents a collection of photos. Collections can be nested.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Fields</h3><div class='subsection'><div id='property-counts' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-counts' class='name expandable'>counts</a><span> : Hash</span></div><div class='description'><div class='short'>Object with fields:\n\n\nphotos: Number. ...</div><div class='long'><p>Object with fields:</p>\n\n<ul>\n<li><code>photos: Number</code>. Number of photos in this collection.</li>\n<li><code>total_photos: Number</code>.  Number of photos in this collection and subcollections.</li>\n<li><code>subcollections: Number</code>. Number of subcollections in this collection.</li>\n</ul>\n\n</div></div></div><div id='property-cover_photo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-cover_photo' class='name not-expandable'>cover_photo</a><span> : <a href=\"#!/api/Photos\" rel=\"Photos\" class=\"docClass\">Photos</a></span></div><div class='description'><div class='short'><p>Photo to use as a cover photo for the collection.</p>\n</div><div class='long'><p>Photo to use as a cover photo for the collection.</p>\n</div></div></div><div id='property-created_at' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-created_at' class='name not-expandable'>created_at</a><span> : Date</span></div><div class='description'><div class='short'><p>Creation date for this user object.</p>\n</div><div class='long'><p>Creation date for this user object.</p>\n</div></div></div><div id='property-id' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-id' class='name not-expandable'>id</a><span> : String</span></div><div class='description'><div class='short'><p>Generated ID for this object.</p>\n</div><div class='long'><p>Generated ID for this object.</p>\n</div></div></div><div id='property-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-name' class='name not-expandable'>name</a><span> : String</span></div><div class='description'><div class='short'><p>Name of the collection.</p>\n</div><div class='long'><p>Name of the collection.</p>\n</div></div></div><div id='property-parent_collection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-parent_collection' class='name not-expandable'>parent_collection</a><span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a></span></div><div class='description'><div class='short'><p>Collection object that contains this subcollection.</p>\n</div><div class='long'><p>Collection object that contains this subcollection.</p>\n</div></div></div><div id='property-updated_at' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-updated_at' class='name not-expandable'>updated_at</a><span> : Date</span></div><div class='description'><div class='short'><p>Last update time for this user object.</p>\n</div><div class='long'><p>Last update time for this user object.</p>\n</div></div></div><div id='property-user' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><a href='#!/api/PhotoCollections-property-user' class='name not-expandable'>user</a><span> : <a href=\"#!/api/Users\" rel=\"Users\" class=\"docClass\">Users</a></span></div><div class='description'><div class='short'><p>Owner of this collection.</p>\n</div><div class='long'><p>Owner of this collection.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-batch_delete' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>DELETE </strong><a href='#!/api/PhotoCollections-method-batch_delete' class='name expandable'>collections/batch_delete.json</a><strong class='signature'>admin-only</strong></div><div class='description'><div class='short'>Deletes PhotoCollections objects that match the query constraints provided in the where parameter. ...</div><div class='long'><p>Deletes PhotoCollections objects that match the query constraints provided in the <code>where</code> parameter.\nIf no <code>where</code> parameter is provided, all PhotoCollections objects are deleted.\nNote that an HTTP 200 code (success)\nis returned if the call completed successfully but the query matched no objects.</p>\n\n<p>For performance reasons, the number of objects that can be deleted in a single batch delete\noperation is limited to 100,000.</p>\n\n<p>The matched objects are deleted asynchronously in a separate process.</p>\n\n<p>The <a href=\"#!/api/PhotoCollections-property-cover_photo\" rel=\"PhotoCollections-property-cover_photo\" class=\"docClass\">cover photo</a> associated with any of the matched objects are not not deleted.</p>\n\n<p>You must be an application admin to run this command.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>where</span> : Hash<div class='sub-desc'><p>Encoded JSON object that specifies constraint values for PhotoCollections objects to delete.\nIf not specified, all PhotoCollections objects are deleted.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Example request to delete all Photo Collection objects.</p>\n\n<pre><code>Cloud.sendRequest({\n    url : \"collections/batch_delete.json\",\n    method : \"DELETE\"\n}, function(e) {\n    if (e.success) {\n        alert(\"All Photo Collection objects have been deleted.\");\n    } else {\n        alert('Error:\\n' + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X DELETE -F \"where={\\\"favorite_color\\\":\\\"blue\\\"}\" https://api.cloud.appcelerator.com/v1/collections/batch_delete.json?key=&lt;API_KEY&gt;&amp;pretty_json=true                 \n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"status\": \"ok\",\n    \"code\": 200,\n    \"method_name\": \"batchDelete\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example request to delete all Photo Collection objects.</p>\n\n<pre><code>[[APSCloud sharedInstance] sendRequest:@\"collections/batch_delete.json\" method:@\"DELETE\" data:nil handler:^(APSResponse *e){\n    if (e.success) {\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:@\"All Photo Collection object have been deleted.\" delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example request to delete all Photo Collection objects.</p>\n\n<pre><code>APSCloud.getInstance().sendRequest(\"collections/batch_delete.json\", \"DELETE\", null, new APSResponseHandler() {\n    public void onResponse(final APSResponse e) {\n        if (e.getSuccess()) {\n            new AlertDialog.Builder(currentActivity)\n            .setTitle(\"Success!\").setMessage(\"All Photo Collection objects have been deleted.\")\n            .setPositiveButton(android.R.string.ok, null)\n            .setIcon(android.R.drawable.ic_dialog_info)\n            .show();\n        }\n        else {\n            Log.e(\"APSCloud\", e.getErrorMessage());\n        }\n    }\n\n    @Override\n    public void onException(APSCloudException e) {\n        Log.e(\"APSCloud\", \"Exception throw: \" + e.toString());\n    }\n});\n</code></pre>\n</div></div></div></div></div><div id='method-count' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>GET </strong><a href='#!/api/PhotoCollections-method-count' class='name not-expandable'>collections/count.json</a></div><div class='description'><div class='short'><p>Retrieves the total number of PhotoCollection objects.</p>\n</div><div class='long'><p>Retrieves the total number of PhotoCollection objects.</p>\n<h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>Total number of PhotoCollection objects. Returned in the <code>meta</code> header.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>Example request to retrieve the total number of PhotoCollection objects.</p>\n\n<pre><code>Cloud.sendRequest({\n    url : \"collections/count.json\",\n    method : \"GET\"\n}, function(e) {\n    if (e.success) {\n        alert(e.meta.count);\n    } else {\n        alert('Error:\\n' + ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/count.json?key=&lt;YOUR_APP_KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"status\": \"ok\",\n    \"method_name\": \"collectionsCount\",\n    \"count\": 1\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example request to retrieve the total number of Photo Collection objects.</p>\n\n<pre><code>[[APSCloud sharedInstance] sendRequest:@\"collections/count.json\" method:@\"GET\" data:nil handler:^(APSResponse *e){\n    if (e.success) {\n        NSString *msg = [NSString stringWithFormat:@\"Count: %@\", [e.meta valueForKey:@\"count\"]];\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" message:msg delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\" message:e.errorMessage delegate:nil cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example request to retrieve the total number of Photo Collection objects.</p>\n\n<pre><code>APSCloud.getInstance().sendRequest(\"collections/count.json\", \"GET\", null, new APSResponseHandler() {\n    public void onResponse(final APSResponse e) {\n        if (e.getSuccess()) {\n            try {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success!\").setMessage(\"Count: \" + Double.toString(e.getMeta().getDouble(\"count\")))\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } catch (Exception error) {\n                Log.e(\"APSCloud\", \"Exception throw: \" + error.toString());\n            }\n        }\n        else {\n            Log.e(\"APSCloud\", e.getErrorMessage());\n        }\n    }\n\n    @Override\n    public void onException(APSCloudException e) {\n        Log.e(\"APSCloud\", \"Exception throw: \" + e.toString());\n    }\n});\n</code></pre>\n</div></div></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>POST </strong><a href='#!/api/PhotoCollections-method-create' class='name expandable'>collections/create.json</a></div><div class='description'><div class='short'>Collections contain one or more photos and/or sub-collections. ...</div><div class='long'><p>Collections contain one or more photos and/or sub-collections. These can be\nused as photo albums for a user. To create a subcollection,\nspecify a <code>parent_collection_id</code> when creating a collection. If the collection has been\ncreated or updated with a <code>cover_photo_id</code>, photo details will be returned\nwith collection information. If a <code>cover_photo_id</code> has not been assigned, the\nfirst photo found in the collection or its sub-collections will be returned as\nthe cover photo.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>Name of the collection. The name must be unique across other top-level\ncollections. If this is a sub-collection, the name must be unique across other\nsub-collections of the same parent.</p>\n</div></li><li><span class='pre'>parent_collection_id</span> : String<div class='sub-desc'><p>Parent collection ID. Specify when creating a subcollection.</p>\n</div></li><li><span class='pre'>cover_photo_id</span> : String<div class='sub-desc'><p>ID of the photo to use as a cover photo. The photo does not need to be\nin the collection.</p>\n</div></li><li><span class='pre'>custom_fields</span> : String/Hash<div class='sub-desc'><p>User defined fields. See <a href=\"#!/guide/customfields\">Custom Data Fields</a>.</p>\n</div></li><li><span class='pre'>acl_name</span> : String<div class='sub-desc'><p>Name of an <a href=\"#!/api/ACLs\" rel=\"ACLs\" class=\"docClass\">ACLs</a> to associate with this collection.</p>\n\n<p>An ACL can be specified using <code>acl_name</code> or <code>acl_id</code>. The two parameters are\nmutually exclusive.</p>\n</div></li><li><span class='pre'>acl_id</span> : String<div class='sub-desc'><p>ID of an <a href=\"#!/api/ACLs\" rel=\"ACLs\" class=\"docClass\">ACLs</a> to associate with this collection.</p>\n\n<p>An ACL can be specified using <code>acl_name</code> or <code>acl_id</code>. The two parameters are\nmutually exclusive.</p>\n</div></li><li><span class='pre'>su_id</span> : String <strong class=\"signature\">admin-only</strong><div class='sub-desc'><p>User ID to create the collection on behalf of.</p>\n\n<p>The current login user must be an application admin to create a collection on\nbehalf of another user.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>collections</span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a>[]<div class='sub-desc'><p>Single-element array containing the newly-created photo collection.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example creates a new photo collection and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.create({\n    name: 'Party Pictures'\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -F \"name=Office Fun\" \"https://api.cloud.appcelerator.com/v1/collections/create.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"method_name\": \"createCollection\",\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"collections\": [\n      {\n        \"name\": \"Office Fun\",\n        \"created_at\": \"2011-06-08T18:32:30+0000\",\n        \"updated_at\": \"2011-06-08T18:32:30+0000\",\n        \"id\": \"4defc03ed0afbe0400000001\",\n        \"user\": {\n          \"created_at\": \"2011-05-26T20:48:07+0000\",\n          \"updated_at\": \"2011-06-04T01:54:39+0000\",\n          \"id\": \"4ddebc87d0afbe5a54000001\",\n          \"last_name\": \"Goff\",\n          \"email\": \"mike@appcelerator.com\",\n          \"first_name\": \"Mike\"\n        },\n        \"counts\": {\n          \"photos\": 0,\n          \"total_photos\": 0,\n          \"sub_collections\": 0\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"name\" : @\"Party Pictures\"\n                      };\n[APSPhotoCollections create:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        NSArray *collections = e.response[@\"collections\"];\n        NSDictionary *collection = collections[0];\n        NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\",\n                                collection[@\"id\"],\n                                collection[@\"name\"],\n                                collection[@\"count\"],\n                                collection[@\"updated_at\"]];\n\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" \n                                    message:message\n                                   delegate:nil \n                          cancelButtonTitle:@\"OK\" \n                          otherButtonTitles:nil] show];\n\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"name\", \"Office Fun\");\n\ntry {\n    APSPhotoCollections.create(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success!\").setMessage(\"Created!\")\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>DELETE </strong><a href='#!/api/PhotoCollections-method-delete' class='name expandable'>collections/delete.json</a></div><div class='description'><div class='short'>Delete an empty collection. ...</div><div class='long'><p>Delete an empty collection. An error will be returned if a collection contains\nany photos or subcollections.</p>\n\n<p>An application admin can delete any photo collection. The <a href=\"#!/api/PhotoCollections-property-cover_photo\" rel=\"PhotoCollections-property-cover_photo\" class=\"docClass\">cover_photo</a> associated\nwith the collection is not deleted.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collection_id</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>ID of the collection to delete.</p>\n</div></li><li><span class='pre'>su_id</span> : String <strong class=\"signature\">admin-only</strong><div class='sub-desc'><p>User ID to delete the collection on behalf of. The user must be the creator of the collection.</p>\n\n<p>The current login user must be an application admin to delete a collection on\nbehalf of another user.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example deletes a photo collection and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.remove({\n    collection_id: savedPhotoCollectionId\n}, function (e) {\n    if (e.success) {\n        alert('Success');\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X DELETE \"https://api.cloud.appcelerator.com/v1/collections/delete.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true&amp;collection_id=4e013938d0afbe3896000009\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"method_name\": \"deleteCollection\",\n    \"status\": \"ok\"\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"collection_id\" : @\"savedPhotoCollectionID\"\n                      };\n[APSPhotoCollections remove:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" \n                                    message:@\"Photo Removed\"\n                                   delegate:nil \n                          cancelButtonTitle:@\"OK\" \n                          otherButtonTitles:nil] show];\n\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"collection_id\", \"4e013938d0afbe3896000009\");\n\ntry {\n    APSPhotoCollections.remove(null, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success!\").setMessage(\"Removed!\")\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-search' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>GET </strong><a href='#!/api/PhotoCollections-method-search' class='name expandable'>collections/search.json</a></div><div class='description'><div class='short'>Search for top-level collections owned by the given user. ...</div><div class='long'><p>Search for top-level collections owned by the given user. Subcollections cannot\nbe found this way. See <a href=\"#!/api/PhotoCollections-method-show_subcollections\" rel=\"PhotoCollections-method-show_subcollections\" class=\"docClass\">Show Subcollections</a> to view the\nsubcollections of a collection.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>user_id</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>ID of the user to find collections for.</p>\n</div></li><li><span class='pre'>page</span> : Number<div class='sub-desc'><p>Request page number, default is 1.</p>\n</div></li><li><span class='pre'>per_page</span> : Number<div class='sub-desc'><p>Number of results per page, default is 10.</p>\n</div></li><li><span class='pre'>response_json_depth</span> : Number<div class='sub-desc'><p>Nested object depth level counts in response JSON.</p>\n\n<p>In order to reduce server API calls from an application, the response JSON may\ninclude not just the objects that are being queried/searched, but also\nsome important data related to the returned objects such as object's owner and\nreferenced objects.</p>\n\n<p>Default is 1, valid range is 1 to 8.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>collections</span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a>[]<div class='sub-desc'><p>List of photos in the collection.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example searches for collections and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.search({\n    user_id: savedUserId\n}, function (e) {\n    if (e.success) {\n        alert('Success:\\n' +\n            'Count: ' + e.collections.length);\n        for (var i = 0; i &lt; e.collections.length; i++) {\n            var collection = e.collections[i];\n            alert('Success:\\n' +\n                'id: ' + collection.id + '\\n' +\n                'name: ' + collection.name + '\\n' +\n                'count: ' + collection.counts.total_photos + '\\n'\n                'updated_at: ' + collection.updated_at);\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/search.json?user_id=4e004e4ed0afbe2f1800003c&amp;key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"total_pages\": 1,\n    \"code\": 200,\n    \"method_name\": \"searchCollections\",\n    \"page\": 1,\n    \"total_results\": 1,\n    \"per_page\": 10,\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"collections\": [\n      {\n        \"name\": \"Skydiving\",\n        \"created_at\": \"2011-06-21T07:54:54+0000\",\n        \"updated_at\": \"2011-06-21T07:54:54+0000\",\n        \"id\": \"4e004e4ed0afbe2f1800003f\",\n        \"user\": {\n          \"created_at\": \"2011-06-21T07:54:54+0000\",\n          \"updated_at\": \"2011-06-21T07:54:54+0000\",\n          \"id\": \"4e004e4ed0afbe2f1800003c\",\n          \"last_name\": \"Mike\",\n          \"email\": \"mike@appcelerator.com\",\n          \"first_name\": \"Goff\"\n        },\n        \"counts\": {\n          \"photos\": 0,\n          \"total_photos\": 0,\n          \"subcollections\": 0\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"user_id\"    : @\"savedUserID\"\n                      };\n[APSPhotoCollections search:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        NSArray *collections = e.response[@\"collections\"];\n        for (NSDictionary *collection in collection) {\n            NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\",\n                                  collection[@\"id\"],\n                                  collection[@\"name\"],\n                                  collection[@\"count\"],\n                                  collection[@\"updated_at\"]];\n\n            [[[UIAlertView alloc] initWithTitle:@\"Success\" \n                                        message:message\n                                       delegate:nil \n                              cancelButtonTitle:@\"OK\" \n                              otherButtonTitles:nil] show];\n        }\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"user_id\", \"4e004e4ed0afbe2f1800003c\");\n\ntry {\n    APSPhotoColllections.search(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    JSONArray collections = e.getResponse().getJSONArray(\"collections\");\n                    if (collections.length() &lt;= 0) {\n                        Log.i(\"APSPhotoCollections\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; collections.length(); i++) {\n                            JSONObject collection = collections.getJSONObject(i);\n                            Log.i(\"APSPhotoCollections\", collection.getString(\"name\"));\n                        }\n                    }\n                } catch (JSONException err) {\n                    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + err.toString());\n                }\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-show' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>GET </strong><a href='#!/api/PhotoCollections-method-show' class='name expandable'>collections/show.json</a></div><div class='description'><div class='short'>Shows information about a collection including the cover photo, owner, parent\ncollection, and counts of its contents. ...</div><div class='long'><p>Shows information about a collection including the cover photo, owner, parent\ncollection, and counts of its contents. See <a href=\"#!/api/PhotoCollections-method-show_subcollections\" rel=\"PhotoCollections-method-show_subcollections\" class=\"docClass\">Show\nSubcollections</a> and <a href=\"#!/api/PhotoCollections-method-show_photos\" rel=\"PhotoCollections-method-show_photos\" class=\"docClass\">Show Photos</a> to view the contents\nof a collection.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collection_id</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>ID of the collection to retrieve photos from.</p>\n</div></li><li><span class='pre'>response_json_depth</span> : Number<div class='sub-desc'><p>Nested object depth level counts in the response JSON.</p>\n\n<p>In order to reduce server API calls from an application, the response JSON may\ninclude not just the objects that are being queried/searched, but also\nsome important data related to the returned objects such as the object's owner or\nreferenced objects.</p>\n\n<p>Default is 1, valid range is 1 to 8.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>collections</span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a>[]<div class='sub-desc'><p>Single-element array containing the photo collection object.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example retrieves information about a photo collection and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.show({\n    collection_id: savedPhotoCollectionId\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true&amp;collection_id=4e012ce0d0afbe362a00000a\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"method_name\": \"showCollection\",\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"collections\": [\n      {\n        \"name\": \"Subcollection 1\",\n        \"parent_collection\": {\n          \"name\": \"Skydiving\",\n          \"created_at\": \"2011-06-21T23:44:32+0000\",\n          \"updated_at\": \"2011-06-21T23:44:32+0000\",\n          \"id\": \"4e012ce0d0afbe362a000009\",\n          \"user\": {\n            \"created_at\": \"2011-06-21T23:44:10+0000\",\n            \"updated_at\": \"2011-06-21T23:44:31+0000\",\n            \"username\": \"bob\",\n            \"id\": \"4e012ccad0afbe362a000002\",\n            \"last_name\": \"Dude\",\n            \"email\": \"bob@dude.com\",\n            \"first_name\": \"Bob\"\n          },\n          \"counts\": {\n            \"photos\": 0,\n            \"total_photos\": 0,\n            \"subcollections\": 1\n          }\n        },\n        \"created_at\": \"2011-06-21T23:44:32+0000\",\n        \"updated_at\": \"2011-06-21T23:44:32+0000\",\n        \"id\": \"4e012ce0d0afbe362a00000a\",\n        \"user\": {\n          \"created_at\": \"2011-06-21T23:44:10+0000\",\n          \"updated_at\": \"2011-06-21T23:44:31+0000\",\n          \"username\": \"bob\",\n          \"id\": \"4e012ccad0afbe362a000002\",\n          \"last_name\": \"Dude\",\n          \"email\": \"bob@dude.com\",\n          \"first_name\": \"Bob\"\n        },\n        \"counts\": {\n          \"photos\": 0,\n          \"total_photos\": 0,\n          \"subcollections\": 0\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"collection_id\" : @\"savedPhotoCollectionID\"\n                      };\n[APSPhotoCollections show:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        NSArray *collections = e.response[@\"collections\"];\n        NSDictionary *collection = collections[0];\n        NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount: %@\\nUpdated at : %@\\n\",\n                                collection[@\"id\"],\n                                collection[@\"name\"],\n                                collection[@\"count\"],\n                                collection[@\"updated_at\"]];\n\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" \n                                    message:message\n                                   delegate:nil \n                          cancelButtonTitle:@\"OK\" \n                          otherButtonTitles:nil] show];\n\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"collection_id\", \"4e012ce0d0afbe362a00000a\");\n\ntry {\n    APSPhotoCollections.show(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT);\n                } catch (APSCloudException err) {\n                    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + err.toString());\n                }\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-show_photos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>GET </strong><a href='#!/api/PhotoCollections-method-show_photos' class='name expandable'>collections/show/photos.json</a></div><div class='description'><div class='short'>Show photos in a collection. ...</div><div class='long'><p>Show photos in a collection.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collection_id</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>ID of the collection to retrieve photos from.</p>\n</div></li><li><span class='pre'>page</span> : Number<div class='sub-desc'><p>Request page number, default is 1.</p>\n</div></li><li><span class='pre'>per_page</span> : Number<div class='sub-desc'><p>Number of results per page, default is 10.</p>\n</div></li><li><span class='pre'>response_json_depth</span> : Number<div class='sub-desc'><p>Nested object depth level counts in the response JSON.</p>\n\n<p>In order to reduce server API calls from an application, the response JSON may\ninclude not just the objects that are being queried/searched, but also\nsome important data related to the returned objects such as the object's owner or\nreferenced objects.</p>\n\n<p>Default is 1, valid range is 1 to 8.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>photos</span> : <a href=\"#!/api/Photos\" rel=\"Photos\" class=\"docClass\">Photos</a>[]<div class='sub-desc'><p>List of photos in the collection.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example requests a list of photos in a photo collections and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.showPhotos({\n    page: 1,\n    per_page: 20,\n    collection_id: savedCollectionId\n}, function (e) {\n    if (e.success) {\n        if (!e.photos) {\n            alert('Success: No photos');\n        } else {\n            alert('Success:\\n' +\n                'Count: ' + e.photos.length);\n            for (var i = 0; i &lt; e.photos.length; i++) {\n                var photo = e.photos[i];\n                Ti.API.info(\n                    'id: ' + photo.id + '\\n' +\n                    'name: ' + photo.filename + '\\n');\n            }\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show/photos.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true&amp;collection_id=4e004df9d0afbe2f18000010\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"method_name\": \"showCollectionPhotos\",\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"photos\": [\n      {\n        \"created_at\": \"2011-06-21T07:53:29+0000\",\n        \"size\": 584344,\n        \"urls\": {\n          \"medium_640\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_640.jpg\",\n          \"medium_500\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_500.jpg\",\n          \"small_240\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_small_240.jpg\",\n          \"square_75\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_square_75.jpg\",\n          \"large_1024\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_large_1024.jpg\",\n          \"original\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_original.jpg\",\n          \"thumb_100\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_thumb_100.jpg\"\n        },\n        \"content_type\": \"image/jpeg\",\n        \"updated_at\": \"2011-06-21T07:53:36+0000\",\n        \"processed\": true,\n        \"id\": \"4e004df9d0afbe2f18000012\",\n        \"exif\": {\n          \"create_date\": \"2010-06-21T02:19:20+0000\"\n        },\n        \"filename\": \"photo.jpg\",\n        \"md5\": \"589b8ad43ed20bf8e622d719642bc939\"\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"page\"         : @1,\n                         @\"per_page\"     : @20,\n                         @\"collection_id\": @\"savedCollectionID\"\n                      };\n[APSPhotoCollections showPhotos:data withBlock:^(APSResponse *e) {\n    if (e.success){\n      NSArray *photos = e.response[@\"photos\"];\n      if ([photos count] == 0) {\n        // handle No photos\n          [[[UIAlertView alloc] initWithTitle:@\"Success\"\n                                      message:@\"No Photos\"\n                                     delegate:nil\n                            cancelButtonTitle:@\"OK\"\n                            otherButtonTitles:nil] show];\n          return;\n      }\n\n      for (NSDictionary *photo in photos) {\n          NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nUpdated at : %@\\n\",\n                                  photo[@\"id\"],\n                                  photo[@\"name\"],\n                                  photo[@\"updated_at\"]];\n          NSLog(@\"%@\", message);\n      }\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"collection_id\", \"4e013938d0afbe3896000009\");\n\ntry {\n    APSPhotoCollections.showPhotos(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    JSONArray photos = e.getResponse().getJSONArray(\"photos\");\n                    if (photos.length() &lt;= 0) {\n                        Log.i(\"APSPhotoCollections\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; photos.length(); i++) {\n                            JSONObject photo = photos.getJSONObject(i);\n                            Log.i(\"APSPhotoCollections\", photo.getString(\"filename\"));\n                        }\n                    }\n                } catch (JSONException err) {\n                       Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + err.toString());\n                }\n\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-show_subcollections' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>GET </strong><a href='#!/api/PhotoCollections-method-show_subcollections' class='name expandable'>collections/show/subcollections.json</a></div><div class='description'><div class='short'>Show subcollections of a collection. ...</div><div class='long'><p>Show subcollections of a collection.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collection_id</span> : String <strong class=\"required signature\">required</strong><div class='sub-desc'><p>ID of the collection to retrieve photos from.</p>\n</div></li><li><span class='pre'>page</span> : Number<div class='sub-desc'><p>Request page number, default is 1.</p>\n</div></li><li><span class='pre'>per_page</span> : Number<div class='sub-desc'><p>Number of results per page, default is 10.</p>\n</div></li><li><span class='pre'>response_json_depth</span> : Number<div class='sub-desc'><p>Nested object depth level counts in the response JSON.</p>\n\n<p>In order to reduce server API calls from an application, the response JSON may\ninclude not just the objects that are being queried/searched, but also\nsome important data related to the returned objects such as the object's owner or\nreferenced objects.</p>\n\n<p>Default is 1, valid range is 1 to 8.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>collections</span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a>[]<div class='sub-desc'><p>List of subcollections in this collection.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example requests a list of photo subcollections and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.showSubcollections({\n    page: 1,\n    per_page: 20,\n    collection_id: savedCollectionId\n}, function (e) {\n    if (e.success) {\n        alert('Success:\\n' +\n            'Count: ' + e.collections.length);\n        for (var i = 0; i &lt; e.collections.length; i++) {\n            var collection = e.collections[i];\n            alert('Success:\\n' +\n                'id: ' + collection.id + '\\n' +\n                'name: ' + collection.name + '\\n' +\n                'count: ' + collection.counts.total_photos + '\\n'\n                'updated_at: ' + collection.updated_at);\n        }\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt \"https://api.cloud.appcelerator.com/v1/collections/show/subcollections.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true&amp;collection_id=4e004df9d0afbe2f18000010\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"total_pages\": 1,\n    \"code\": 200,\n    \"method_name\": \"showCollectionSubcollections\",\n    \"page\": 1,\n    \"total_results\": 2,\n    \"per_page\": 10,\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"collections\": [\n      {\n        \"name\": \"Subcollection 1\",\n        \"cover_photo\": {\n          \"created_at\": \"2011-06-21T07:53:29+0000\",\n          \"size\": 584344,\n          \"urls\": {\n            \"medium_640\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_640.jpg\",\n            \"medium_500\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_500.jpg\",\n            \"small_240\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_small_240.jpg\",\n            \"square_75\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_square_75.jpg\",\n            \"large_1024\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_large_1024.jpg\",\n            \"original\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_original.jpg\",\n            \"thumb_100\": \"http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_thumb_100.jpg\"\n          },\n          \"content_type\": \"image/jpeg\",\n          \"updated_at\": \"2011-06-21T07:53:36+0000\",\n          \"processed\": true,\n          \"id\": \"4e004df9d0afbe2f18000012\",\n          \"exif\": {\n            \"create_date\": \"2010-06-21T02:19:20+0000\"\n          },\n          \"filename\": \"photo.jpg\",\n          \"md5\": \"589b8ad43ed20bf8e622d719642bc939\"\n        },\n        \"created_at\": \"2011-06-21T07:53:29+0000\",\n        \"updated_at\": \"2011-06-21T07:53:29+0000\",\n        \"id\": \"4e004df9d0afbe2f18000011\",\n        \"user\": {\n          \"created_at\": \"2011-06-21T07:53:15+0000\",\n          \"updated_at\": \"2011-06-21T07:53:29+0000\",\n          \"username\": \"bob\",\n          \"id\": \"4e004debd0afbe2f18000009\",\n          \"last_name\": \"Dude\",\n          \"email\": \"bob@dude.com\",\n          \"first_name\": \"Bob\"\n        },\n        \"counts\": {\n          \"photos\": 1,\n          \"total_photos\": 1,\n          \"subcollections\": 0\n        }\n      },\n      {\n        \"name\": \"Subcollection 2\",\n        \"created_at\": \"2011-06-21T07:53:38+0000\",\n        \"updated_at\": \"2011-06-21T07:53:38+0000\",\n        \"id\": \"4e004e02d0afbe2f18000015\",\n        \"user\": {\n          \"created_at\": \"2011-06-21T07:53:15+0000\",\n          \"updated_at\": \"2011-06-21T07:53:29+0000\",\n          \"username\": \"bob\",\n          \"id\": \"4e004debd0afbe2f18000009\",\n          \"last_name\": \"Dude\",\n          \"email\": \"bob@dude.com\",\n          \"first_name\": \"Bob\"\n        },\n        \"counts\": {\n          \"photos\": 0,\n          \"total_photos\": 0,\n          \"subcollections\": 0\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"page\"         : @1,\n                         @\"per_page\"     : @20,\n                         @\"collection_id\": @\"savedCollectionID\"\n                      };\n[APSPhotoCollections showSubcollections:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        NSArray *collections = e.response[@\"collections\"];\n        for (NSDictionary *collection in collections) {\n            NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount : %@\\nUpdated at : %@\\n\",\n                                    collection[@\"id\"],\n                                    collection[@\"name\"],\n                                    collection[@\"count\"],\n                                    collection[@\"updated_at\"]];\n\n            NSLog(@\"%@\", message);\n        }\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"collection_id\", \"4e013938d0afbe3896000009\");\n\ntry {\n    APSPhotoCollections.showSubcollections(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                try {\n                    JSONArray collections = e.getResponse().getJSONArray(\"collections\");\n                    if (collectionss.length() &lt;= 0) {\n                        Log.i(\"APSPhotoCollections\", \"No Results!\");\n                    } else {\n                        for (int i = 0; i &lt; collections.length(); i++) {\n                            JSONObject collection = collections.getJSONObject(i);\n                            Log.i(\"APSPhotoCollections\", collection.getString(\"name\"));\n                        }\n                    }\n                } catch (JSONException err) {\n                       Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + err.toString());\n                }\n\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='PhotoCollections'>PhotoCollections</span></div><strong class='http-method'>PUT </strong><a href='#!/api/PhotoCollections-method-update' class='name expandable'>collections/update.json</a></div><div class='description'><div class='short'>Updates a photo collection. ...</div><div class='long'><p>Updates a photo collection.</p>\n\n<p>An existing collection's cover photo can be added or updated by specifying a\nnew <code>cover_photo_id</code>. The cover photo can be removed by sending an empty\nstring as the value for <code>cover_photo_id</code>.\nApplication Admin can update any Photo Collection.</p>\n<strong>User Login Required: Yes</strong><h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collection_id</span> : String<div class='sub-desc'><p>ID of the collection to update.</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>New name of the collection. The name must be unique across other top-level\ncollections. If this is a sub-collection, the name must be unique across other\nsub-collections of the same parent.</p>\n</div></li><li><span class='pre'>cover_photo_id</span> : String<div class='sub-desc'><p>ID of the photo to use as a cover photo. The photo does not need to be\nin the collection.</p>\n</div></li><li><span class='pre'>custom_fields</span> : String/Hash<div class='sub-desc'><p>User defined fields. See <a href=\"#!/guide/customfields\">Custom Data Fields</a>.</p>\n</div></li><li><span class='pre'>acl_name</span> : String<div class='sub-desc'><p>Name of an <a href=\"#!/api/ACLs\" rel=\"ACLs\" class=\"docClass\">ACLs</a> to associate with this collection.</p>\n\n<p>An ACL can be specified using <code>acl_name</code> or <code>acl_id</code>. The two parameters are\nmutually exclusive.</p>\n</div></li><li><span class='pre'>acl_id</span> : String<div class='sub-desc'><p>ID of an <a href=\"#!/api/ACLs\" rel=\"ACLs\" class=\"docClass\">ACLs</a> to associate with this collection.</p>\n\n<p>An ACL can be specified using <code>acl_name</code> or <code>acl_id</code>. The two parameters are\nmutually exclusive.</p>\n</div></li><li><span class='pre'>su_id</span> : String <strong class=\"signature\">admin-only</strong><div class='sub-desc'><p>User ID to update the collection on behalf of. The user must be the creator of the collection.</p>\n\n<p>The current login user must be an application admin to update a collection on\nbehalf of another user.</p>\n</div></li><li><span class='pre'>pretty_json</span> : Boolean<div class='sub-desc'><p>Determines if the JSON response is formatted for readability (<code>true</code>), or displayed on a\nsingle line (<code>false</code>). Default is <code>false</code>.</p>\n</div></li></ul><h3 class=\"pa\">Response Parameters</h3><ul><li><span class='pre'>collections</span> : <a href=\"#!/api/PhotoCollections\" rel=\"PhotoCollections\" class=\"docClass\">PhotoCollections</a>[]<div class='sub-desc'><p>Single-element array containing the updated collection.</p>\n</div></li></ul><div class='examples-section'><h3 class='examples-title icon-examples'>Examples</h3><div class='example example-titanium' platform='titanium' platform_name='Titanium SDK'><p>This example updates a photo collection and checks the response.</p>\n\n<pre><code>Cloud.PhotoCollections.update({\n    collection_id: savedPhotoCollectionId,\n    cover_photo_id: savedPhotoId\n}, function (e) {\n    if (e.success) {\n        var collection = e.collections[0];\n        alert('Success:\\n' +\n            'id: ' + collection.id + '\\n' +\n            'name: ' + collection.name + '\\n' +\n            'count: ' + collection.counts.total_photos + '\\n'\n            'updated_at: ' + collection.updated_at);\n    } else {\n        alert('Error:\\n' +\n            ((e.error &amp;&amp; e.message) || JSON.stringify(e)));\n    }\n});\n</code></pre>\n</div><div class='example example-rest' platform='rest' platform_name='REST API'><p>Example cURL request:</p>\n\n<pre><code>$ curl -b cookies.txt -c cookies.txt -X PUT -F \"cover_photo_id=4deece22d0afbe3ab4000002\" -F \"collection_id=4deb4496d0afbec69e000008\" \"https://api.cloud.appcelerator.com/v1/collections/update.json?key=&lt;YOUR APP APP KEY&gt;&amp;pretty_json=true\"\n</code></pre>\n\n<p>Example JSON response:</p>\n\n<pre><code>{\n  \"meta\": {\n    \"code\": 200,\n    \"method_name\": \"updateCollection\",\n    \"status\": \"ok\"\n  },\n  \"response\": {\n    \"collections\": [\n      {\n        \"name\": \"Sky Diving\",\n        \"cover_photo\": {\n          \"created_at\": \"2011-06-08T01:19:30+0000\",\n          \"size\": 6178569,\n          \"urls\": {\n            \"medium_640\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_medium_640.jpg\",\n            \"medium_500\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_medium_500.jpg\",\n            \"small_240\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_small_240.jpg\",\n            \"square_75\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_square_75.jpg\",\n            \"large_1024\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_large_1024.jpg\",\n            \"original\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_original.jpg\",\n            \"thumb_100\": \"http://storage.appcelerator.com/ZnkQfIWk1yUZq3m82QE9ZXrbq5jxqLEz/photos/4deece22d0afbe3ab4000002/IMG_0078_thumb_100.jpg\"\n          },\n          \"content_type\": \"image/jpeg\",\n          \"updated_at\": \"2011-06-08T01:20:08+0000\",\n          \"tags\": [\n            \"foo\",\n            \"bar\"\n          ],\n          \"processed\": true,\n          \"id\": \"4deece22d0afbe3ab4000002\",\n          \"exif\": {\n            \"create_date\": \"2010-06-03T02:36:42+0000\"\n          },\n          \"filename\": \"IMG_0078.jpg\",\n          \"md5\": \"8c189ce29ecab9daf9d14fbe679c339d\"\n        },\n        \"created_at\": \"2011-06-05T08:55:50+0000\",\n        \"updated_at\": \"2011-06-08T18:10:36+0000\",\n        \"id\": \"4deb4496d0afbec69e000008\",\n        \"user\": {\n          \"created_at\": \"2011-05-26T20:48:07+0000\",\n          \"updated_at\": \"2011-06-04T01:54:39+0000\",\n          \"id\": \"4ddebc87d0afbe5a54000001\",\n          \"last_name\": \"Goff\",\n          \"email\": \"mike@appcelerator.com\",\n          \"first_name\": \"Mike\"\n        },\n        \"counts\": {\n          \"photos\": 0,\n          \"total_photos\": 1,\n          \"subcollections\": 2\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n</div><div class='example example-ios' platform='ios' platform_name='iOS SDK'><p>Example iOS call:</p>\n\n<pre><code>NSDictionary *data = @{\n                         @\"collection_id\" : @\"savedPhotoCollectionID\",\n                         @\"cover_photo_id\": @\"savedPhotoID\"\n                      };\n[APSPhotoCollections update:data withBlock:^(APSResponse *e) {\n    if (e.success){\n        NSArray *collections = e.response[@\"collections\"];\n        NSDictionary *collection = collections[0];\n        NSString *message = [NSString stringWithFormat:@\"id : %@\\n Name : %@\\nCount : %@\\nUpdated at : %@\\n\",\n                                collection[@\"id\"],\n                                collection[@\"name\"],\n                                collection[@\"count\"],\n                                collection[@\"updated_at\"]];\n\n        [[[UIAlertView alloc] initWithTitle:@\"Success\" \n                                    message:message\n                                   delegate:nil \n                          cancelButtonTitle:@\"OK\" \n                          otherButtonTitles:nil] show];\n\n    } else {\n        [[[UIAlertView alloc] initWithTitle:@\"Error\"\n                                    message:e.errorMessage\n                                   delegate:nil\n                          cancelButtonTitle:@\"OK\"\n                          otherButtonTitles:nil] show];\n    }\n}];\n</code></pre>\n</div><div class='example example-android' platform='android' platform_name='Android SDK'><p>Example Android APS SDK call:</p>\n\n<pre><code>APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');\nfinal Activity currentActivity = this;\n\nHashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();\ndata.put(\"collection_id\", \"4deb4496d0afbec69e000008\");\ndata.put(\"cover_photo_id\", \"4deece22d0afbe3ab4000002\");\n\ntry {\n    APSPhotoCollections.update(data, new APSResponseHandler() {\n\n        @Override\n        public void onResponse(final APSResponse e) {\n            if (e.getSuccess()) {\n                new AlertDialog.Builder(currentActivity)\n                .setTitle(\"Success\").setMessage(\"Updated!\")\n                .setPositiveButton(android.R.string.ok, null)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .show();\n            } else {\n                Log.e(\"APSPhotoCollections\", \"ERROR: \" + e.getErrorMessage());\n            }\n        }\n\n        @Override\n        public void onException(final APSCloudException e) {\n            Log.e(\"APSPhotoCollections\", \"Exception throw: \" + e.toString());\n        }\n    });\n} catch (APSCloudException e) {\n    Log.e(\"APSPhotoCollections\", \"Exception thrown: \" + e.toString());\n}\n</code></pre>\n</div></div></div></div></div></div></div></div></div>"});